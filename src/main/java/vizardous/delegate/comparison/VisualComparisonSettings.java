/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vizardous.delegate.comparison;

import java.awt.event.ActionEvent;

import javax.swing.ButtonGroup;

import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;

import javax.swing.AbstractButton;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import vizardous.delegate.analysis.VisualAnalysisSettingsJDialog;

/**
 * TODO
 *
 * @author Charaf E. Azzouzi <c.azzouzi@fz-juelich.de>
 * @version 1.0
 * 
 */
public class VisualComparisonSettings extends javax.swing.JDialog implements ActionListener {

    private ButtonGroup groupComparisonMode             = new ButtonGroup();
    private ButtonGroup groupButtonStructuralComparison = new ButtonGroup();
    private ButtonGroup groupButtonMetadataComparison   = new ButtonGroup();
    private ButtonGroup groupButtonCombinedComparison   = new ButtonGroup();
    private ButtonGroup groupButtonFluorescencesTyp     = new ButtonGroup();
    private Map<String, Double> thresholds = new HashMap<String, Double>();
    private String selectedSource ;

    /** The {@link Logger} for this class. */
    final Logger logger = LoggerFactory.getLogger(VisualComparisonSettings.class);
    
    /**
     * Creates new form VisualAnalysisSettingsJDialog
     */
    public VisualComparisonSettings(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        fluorescencesRB = new javax.swing.JRadioButton();
        lengthRB = new javax.swing.JRadioButton();
        areaRB = new javax.swing.JRadioButton();
        fluorescence1RB = new javax.swing.JRadioButton();
        fluorescence2RB = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        combinedFluorescence1CB = new javax.swing.JCheckBox();
        combinedFluorescence2CB = new javax.swing.JCheckBox();
        combinedDivisionTimesMethodCB = new javax.swing.JCheckBox();
        combinedDijkstraShortestPathAlgorithmCB = new javax.swing.JCheckBox();
        combinedLengthCB = new javax.swing.JCheckBox();
        combinedAreaCB = new javax.swing.JCheckBox();
        combinedNodalDistanceMethodCB = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        structruralComparisonMode = new javax.swing.JRadioButton();
        metaDataComparisonMode = new javax.swing.JRadioButton();
        combinedComparisonMode = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        dijkstraShortestPathAlgorithmRB = new javax.swing.JRadioButton();
        divisionTimesMethodRB = new javax.swing.JRadioButton();
        nodalDistanceMethodRB = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Visual Analysis settings");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Metadata comparison"));

        fluorescencesRB.setText("Fluorescences");
        fluorescencesRB.setEnabled(false);

        lengthRB.setText("Length");
        lengthRB.setEnabled(false);
        lengthRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthRBActionPerformed(evt);
            }
        });

        areaRB.setText("Area");
        areaRB.setEnabled(false);

        fluorescence1RB.setText("YFP fluorescence");
        fluorescence1RB.setEnabled(false);

        fluorescence2RB.setText("CRIMSON fluorescence");
        fluorescence2RB.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(areaRB)
                    .addComponent(lengthRB)
                    .addComponent(fluorescencesRB))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fluorescence2RB)
                    .addComponent(fluorescence1RB))
                .addGap(8, 8, 8))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fluorescence1RB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fluorescence2RB)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fluorescencesRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lengthRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(areaRB)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Structural & Metadata comparison"));
        jPanel3.setPreferredSize(new java.awt.Dimension(147, 173));

        combinedFluorescence1CB.setText("YFP fluorescence");
        combinedFluorescence1CB.setEnabled(false);

        combinedFluorescence2CB.setText("CRIMSON fluorescence");
        combinedFluorescence2CB.setEnabled(false);

        combinedDivisionTimesMethodCB.setText("Division time algorithm");
        combinedDivisionTimesMethodCB.setEnabled(false);
        combinedDivisionTimesMethodCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinedDivisionTimesMethodCBActionPerformed(evt);
            }
        });

        combinedDijkstraShortestPathAlgorithmCB.setText("Dijkstra shortest path algorithm");
        combinedDijkstraShortestPathAlgorithmCB.setEnabled(false);

        combinedLengthCB.setText("Length");
        combinedLengthCB.setEnabled(false);

        combinedAreaCB.setText("Area");
        combinedAreaCB.setEnabled(false);

        combinedNodalDistanceMethodCB.setText("Nodal distance method");
        combinedNodalDistanceMethodCB.setEnabled(false);
        combinedNodalDistanceMethodCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinedNodalDistanceMethodCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combinedDivisionTimesMethodCB)
                    .addComponent(combinedDijkstraShortestPathAlgorithmCB)
                    .addComponent(combinedNodalDistanceMethodCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combinedAreaCB)
                    .addComponent(combinedLengthCB)
                    .addComponent(combinedFluorescence2CB)
                    .addComponent(combinedFluorescence1CB))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(combinedDijkstraShortestPathAlgorithmCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combinedDivisionTimesMethodCB))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(combinedFluorescence1CB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combinedFluorescence2CB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combinedLengthCB)
                    .addComponent(combinedNodalDistanceMethodCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(combinedAreaCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("Select comparison mode.");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Comparison Mode"));

        structruralComparisonMode.setText("Structrural");
        structruralComparisonMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                structruralComparisonModeActionPerformed(evt);
            }
        });

        metaDataComparisonMode.setText("Metadata");
        metaDataComparisonMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDataComparisonModeActionPerformed(evt);
            }
        });

        combinedComparisonMode.setText("Combine");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(structruralComparisonMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(metaDataComparisonMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(66, 66, 66)
                .addComponent(combinedComparisonMode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(141, 141, 141))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(metaDataComparisonMode)
                    .addComponent(combinedComparisonMode)
                    .addComponent(structruralComparisonMode))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Structural comparison"));
        jPanel4.setPreferredSize(new java.awt.Dimension(147, 173));

        dijkstraShortestPathAlgorithmRB.setText("Dijkstra shortest path algorithm");
        dijkstraShortestPathAlgorithmRB.setEnabled(false);
        dijkstraShortestPathAlgorithmRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dijkstraShortestPathAlgorithmRBActionPerformed(evt);
            }
        });

        divisionTimesMethodRB.setText("Division time algorithm");
        divisionTimesMethodRB.setEnabled(false);
        divisionTimesMethodRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionTimesMethodRBActionPerformed(evt);
            }
        });

        nodalDistanceMethodRB.setText("Nodal distance method");
        nodalDistanceMethodRB.setEnabled(false);
        nodalDistanceMethodRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodalDistanceMethodRBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nodalDistanceMethodRB)
                    .addComponent(dijkstraShortestPathAlgorithmRB)
                    .addComponent(divisionTimesMethodRB))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dijkstraShortestPathAlgorithmRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(divisionTimesMethodRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nodalDistanceMethodRB)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Similarity Score"));

        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(459, 459, 459)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void structruralComparisonModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_structruralComparisonModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_structruralComparisonModeActionPerformed

    private void divisionTimesMethodRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisionTimesMethodRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_divisionTimesMethodRBActionPerformed

    private void lengthRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lengthRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lengthRBActionPerformed

    private void metaDataComparisonModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaDataComparisonModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metaDataComparisonModeActionPerformed

    private void nodalDistanceMethodRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodalDistanceMethodRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nodalDistanceMethodRBActionPerformed

    private void combinedDivisionTimesMethodCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinedDivisionTimesMethodCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combinedDivisionTimesMethodCBActionPerformed

    private void combinedNodalDistanceMethodCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinedNodalDistanceMethodCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combinedNodalDistanceMethodCBActionPerformed

    private void dijkstraShortestPathAlgorithmRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dijkstraShortestPathAlgorithmRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dijkstraShortestPathAlgorithmRBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualAnalysisSettingsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualAnalysisSettingsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualAnalysisSettingsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualAnalysisSettingsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VisualComparisonSettings dialog = new VisualComparisonSettings(new javax.swing.JFrame(), true);
                LoggerFactory.getLogger(VisualComparisonSettings.class).debug("Source: " + dialog.getSelectedSource());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton areaRB;
    private javax.swing.JCheckBox combinedAreaCB;
    private javax.swing.JRadioButton combinedComparisonMode;
    private javax.swing.JCheckBox combinedDijkstraShortestPathAlgorithmCB;
    private javax.swing.JCheckBox combinedDivisionTimesMethodCB;
    private javax.swing.JCheckBox combinedFluorescence1CB;
    private javax.swing.JCheckBox combinedFluorescence2CB;
    private javax.swing.JCheckBox combinedLengthCB;
    private javax.swing.JCheckBox combinedNodalDistanceMethodCB;
    private javax.swing.JRadioButton dijkstraShortestPathAlgorithmRB;
    private javax.swing.JRadioButton divisionTimesMethodRB;
    private javax.swing.JRadioButton fluorescence1RB;
    private javax.swing.JRadioButton fluorescence2RB;
    private javax.swing.JRadioButton fluorescencesRB;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JRadioButton lengthRB;
    private javax.swing.JRadioButton metaDataComparisonMode;
    private javax.swing.JRadioButton nodalDistanceMethodRB;
    private javax.swing.JRadioButton structruralComparisonMode;
    // End of variables declaration//GEN-END:variables

    private void init() {
        /** comparison mode menu */
        structruralComparisonMode.addActionListener(this);
        metaDataComparisonMode.addActionListener(this);
        combinedComparisonMode.addActionListener(this);
        
        /** structural comparison mode menu */
        dijkstraShortestPathAlgorithmRB.addActionListener(this);
        divisionTimesMethodRB.addActionListener(this);
        nodalDistanceMethodRB.addActionListener(this);
        
        /** Metadata comparison mode menu */
        fluorescencesRB.addActionListener(this);
        lengthRB.addActionListener(this);
        areaRB.addActionListener(this);
        fluorescence1RB.addActionListener(this);
        fluorescence2RB.addActionListener(this);
        
        
        /** Combined comparison mode menu */
        combinedDijkstraShortestPathAlgorithmCB.addActionListener(this);
        combinedDivisionTimesMethodCB.addActionListener(this);
        combinedNodalDistanceMethodCB.addActionListener(this);
        combinedFluorescence1CB.addActionListener(this);        
        combinedFluorescence2CB.addActionListener(this);        
        combinedLengthCB.addActionListener(this);        
        combinedAreaCB.addActionListener(this);
        
        /** Add mode button to group button */
        groupComparisonMode.add(structruralComparisonMode);
        groupComparisonMode.add(metaDataComparisonMode);
        groupComparisonMode.add(combinedComparisonMode);
        
        /** Add mode button to group button */
        groupButtonStructuralComparison.add(dijkstraShortestPathAlgorithmRB);
        groupButtonStructuralComparison.add(divisionTimesMethodRB);
        groupButtonStructuralComparison.add(nodalDistanceMethodRB);
        
        /** Add mode button to group button */
        groupButtonMetadataComparison.add(fluorescencesRB);
        groupButtonMetadataComparison.add(lengthRB);
        groupButtonMetadataComparison.add(areaRB);
        
        /** Add mode button to group button */
        groupButtonFluorescencesTyp.add(fluorescence1RB);
        groupButtonFluorescencesTyp.add(fluorescence2RB);
        
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        AbstractButton source = (AbstractButton)ae.getSource();
        
        //structrural Comparison Mode
        if (source == structruralComparisonMode) {
            // Activate the JRadioButtons
            dijkstraShortestPathAlgorithmRB.setEnabled(true);
            divisionTimesMethodRB.setEnabled(false);
            nodalDistanceMethodRB.setEnabled(false);
            
            // Disactivate others JRadioButtons
            fluorescencesRB.setEnabled(false);
            lengthRB.setEnabled(false);
            areaRB.setEnabled(false);
            fluorescence1RB.setEnabled(false);
            fluorescence2RB.setEnabled(false);
            combinedDijkstraShortestPathAlgorithmCB.setEnabled(false);
            combinedDivisionTimesMethodCB.setEnabled(false);
            combinedFluorescence1CB.setEnabled(false);        
            combinedFluorescence2CB.setEnabled(false);     
            combinedLengthCB.setEnabled(false);
            combinedAreaCB.setEnabled(false);
            
        } else if (source == dijkstraShortestPathAlgorithmRB) {
            selectedSource = dijkstraShortestPathAlgorithmRB.getText();
            
        } else if (source == divisionTimesMethodRB) {
            selectedSource = divisionTimesMethodRB.getText();
            
        } else if (source == nodalDistanceMethodRB) {
            selectedSource = nodalDistanceMethodRB.getText();
            
        } else if (source == metaDataComparisonMode) {
            // Activate the JRadioButtons
            fluorescencesRB.setEnabled(true);
            lengthRB.setEnabled(true);
            areaRB.setEnabled(true);
            fluorescence1RB.setEnabled(false);
            fluorescence2RB.setEnabled(false);
            
            // Disactivate others JRadioButtons
            dijkstraShortestPathAlgorithmRB.setEnabled(false);
            divisionTimesMethodRB.setEnabled(false);
            nodalDistanceMethodRB.setEnabled(false);
            combinedDijkstraShortestPathAlgorithmCB.setEnabled(false);
            combinedDivisionTimesMethodCB.setEnabled(false);
            combinedNodalDistanceMethodCB.setEnabled(false);
            combinedFluorescence1CB.setEnabled(false);        
            combinedFluorescence2CB.setEnabled(false);     
            combinedLengthCB.setEnabled(false);
            combinedAreaCB.setEnabled(false);
            
            selectedSource = metaDataComparisonMode.getText();
            
        } else if (source == lengthRB) {
            // Activate the JRadioButtons
            fluorescence1RB.setEnabled(false);
            fluorescence2RB.setEnabled(false);
            
            selectedSource = lengthRB.getText();
        }
        else if (source == areaRB) {
            // Activate the JRadioButtons
            fluorescence1RB.setEnabled(false);
            fluorescence2RB.setEnabled(false);
            
            selectedSource = areaRB.getText();
            
        } else if (source == fluorescencesRB) {
            // Disactivate the JRadioButtons
            fluorescence1RB.setEnabled(true);
            fluorescence2RB.setEnabled(true);
            
            selectedSource = fluorescencesRB.getText();
        
        } else if (source == fluorescence1RB) {
            selectedSource = fluorescence1RB.getText();

        } else if (source == fluorescence2RB) {
            selectedSource = fluorescence2RB.getText();

//        } else if (source == yfpThresholdRB) {
//            // Disactivate the JRadioButtons
//            fluorescence1RB.setEnabled(false);
//            fluorescence2RB.setEnabled(false);
//            
//            selectedSource = yfpThresholdRB.getText();
//            if (thresholds.get("yfp") == null) 
//                thresholds.put("yfp", Double.valueOf(yfpThresholdValueTextField.getText()));
                
//        } else if (source == crimsonThresholdRB) {
//            // Disactivate the JRadioButtons
//            fluorescence1RB.setEnabled(false);
//            fluorescence2RB.setEnabled(false);
//            
//            selectedSource = crimsonThresholdRB.getText();
//            if (thresholds.get("crimson") == null) 
//                thresholds.put("crimson", Double.valueOf(crimsonThresholdValueTextField.getText()));
                
        } else if (source == combinedComparisonMode) {
            // Activate the JRadioButtons
            combinedDijkstraShortestPathAlgorithmCB.setEnabled(true);
            combinedDivisionTimesMethodCB.setEnabled(false);
            combinedNodalDistanceMethodCB.setEnabled(false);
            combinedFluorescence1CB.setEnabled(true);
            combinedFluorescence2CB.setEnabled(true);
            combinedLengthCB.setEnabled(true);
            combinedAreaCB.setEnabled(true);
                        
            // Disactivate others JRadioButtons
            dijkstraShortestPathAlgorithmRB.setEnabled(false);
            divisionTimesMethodRB.setEnabled(false);
            nodalDistanceMethodRB.setEnabled(false);
            fluorescencesRB.setEnabled(false);
            lengthRB.setEnabled(false);
            areaRB.setEnabled(false);
            fluorescence1RB.setEnabled(false);
            fluorescence2RB.setEnabled(false);
            
            selectedSource = combinedComparisonMode.getText();
        
//        } else if (source == combinedDijkstraShortestPathAlgorithmCB) {
//            selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText();
//            
//        } else if (source == combinedDivisionTimesMethodCB) {
//            selectedSource = combinedDivisionTimesMethodCB.getText();
//            
//        } else if (source == combinedNodalDistanceMethodCB) {
//            selectedSource = combinedNodalDistanceMethodCB.getText();
//            
//        } else if (source == combinedFluorescence1CB) {
//            selectedSource = combinedFluorescence1CB.getText();
//            
//        } else if (source == combinedFluorescence2CB) {
//            selectedSource = combinedFluorescence2CB.getText();
//            
//        } else if (source == combinedLengthCB) {
//            selectedSource = combinedLengthCB.getText();
//            
//        } else if (source == combinedAreaCB) {
//            selectedSource = combinedAreaCB.getText(); 
//            
//        } else if (source == combinedFluorescence1CB) {
//            selectedSource = combinedFluorescence1CB.getText(); 
//            
//        } else if (source == combinedFluorescence1CB) {
//            selectedSource = combinedFluorescence1CB.getText(); 
//            
//        } else if (source == combinedFluorescence1CB) {
//            selectedSource = combinedFluorescence1CB.getText();    
            
//            if(combinedDijkstraShortestPathAlgorithmCB.isSelected()) 
//                selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText();
//             else 
//                selectedSource = combinedComparisonMode.getText();
//            
//        } else if (source == combinedFluorescence1CB) {
//            if ( combinedFluorescence1CB.isSelected() ) 
//                selectedSource = combinedFluorescence1CB.getText();
//            else
//                selectedSource = combinedComparisonMode.getText();
//            
//        } else if (source == combinedFluorescence2CB) {
//            if ( combinedFluorescence2CB.isSelected() ) 
//                selectedSource = combinedFluorescence2CB.getText();
//            else
//                selectedSource = combinedComparisonMode.getText();
//            
//        } else if (source == combinedLengthCB) {
//            if ( combinedLengthCB.isSelected() ) 
//                selectedSource = combinedLengthCB.getText();
//            else
//                selectedSource = combinedComparisonMode.getText();
//            
//        } else if (source == combinedAreaCB) {
//            if ( combinedAreaCB.isSelected() ) 
//                selectedSource = combinedAreaCB.getText();
//            else
//                selectedSource = combinedComparisonMode.getText();
//            
        //------------------------ Begin choice possibilities for DSP-Algorithm-CheckBox-Button --------------------------------------------------------
        } else if ( (source == combinedDijkstraShortestPathAlgorithmCB) ) {
            if( (combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) ) 
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence1CB.getText();
            
             else if((combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence2CB.getText();
             
             else if((combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedLengthCB.getText();
             
             else if( (combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedAreaCB.isSelected() ) ) 
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedFluorescence2CB.getText();
             
             else if( (combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedLengthCB.getText();
             

             else if( (combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence2CB.getText() + ":" + combinedLengthCB.getText();
             

             else if( (combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence2CB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedDijkstraShortestPathAlgorithmCB.isSelected()) && ( combinedLengthCB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedLengthCB.getText() + ":" + combinedAreaCB.getText();
             
            else
                    selectedSource = combinedDijkstraShortestPathAlgorithmCB.getText(); 
       //------------------------ End choice possibilities for DSP-Algorithm-CheckBox-Button --------------------------------------------------------
            
       //------------------------ Begin choice possibilities for fluorescence-YFPTyp-CheckBox-Button --------------------------------------------------------
        } else if ( (source == combinedFluorescence1CB) ) {
            if( (combinedFluorescence1CB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText();
            
             else if((combinedFluorescence1CB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedFluorescence2CB.getText();
             
             else if((combinedFluorescence1CB.isSelected()) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedLengthCB.getText();
             
             else if( (combinedFluorescence1CB.isSelected()) && ( combinedAreaCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedFluorescence1CB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence2CB.getText();
             
             else if( (combinedFluorescence1CB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedLengthCB.getText();
             
             else if( (combinedFluorescence1CB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedAreaCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedFluorescence1CB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedLengthCB.getText();

             else if( (combinedFluorescence1CB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedFluorescence1CB.isSelected()) && ( combinedLengthCB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedFluorescence1CB.getText() + ":" + combinedLengthCB.getText() + ":" + combinedAreaCB.getText();
             
            else
                    selectedSource = combinedFluorescence1CB.getText(); 
         //------------------------ End choice possibilities for fluorescence-YFPTyp-CheckBox-Button ------------------------------------------------------------

        //------------------------ Begin choice possibilities for fluorescence-CRIMSONTyp-CheckBox-Button --------------------------------------------------------
        } else if ( (source == combinedFluorescence2CB) ) {
            if( (combinedFluorescence2CB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText();
            
             else if((combinedFluorescence2CB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) ) 
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedFluorescence1CB.getText();
             
             else if((combinedFluorescence2CB.isSelected()) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedLengthCB.getText();
             
             else if( (combinedFluorescence2CB.isSelected()) && ( combinedAreaCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedFluorescence2CB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedFluorescence1CB.isSelected() ) ) 
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence1CB.getText();
             
             else if( (combinedFluorescence2CB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedLengthCB.getText();
             
             else if( (combinedFluorescence2CB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedAreaCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedFluorescence2CB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedLengthCB.getText();

             else if( (combinedFluorescence2CB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedFluorescence2CB.isSelected()) && ( combinedLengthCB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedFluorescence2CB.getText() + ":" + combinedLengthCB.getText() + ":" + combinedAreaCB.getText();
             
            else
                    selectedSource = combinedFluorescence2CB.getText();  
        //------------------------ End choice possibilities for fluorescence-CRIMSONTyp-CheckBox-Button ------------------------------------------------------------

        //------------------------ Begin choice possibilities for lengthCB-CheckBox-Button --------------------------------------------------------
        } else if ( (source == combinedLengthCB) ) {
            if( (combinedLengthCB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) ) 
                    selectedSource = combinedLengthCB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText();
            
             else if((combinedLengthCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) ) 
                    selectedSource = combinedLengthCB.getText() + ":" + combinedFluorescence1CB.getText();
             
             else if((combinedLengthCB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedLengthCB.getText() + ":" + combinedFluorescence2CB.getText();
             
             else if( (combinedLengthCB.isSelected()) && ( combinedAreaCB.isSelected() ) ) 
                    selectedSource = combinedLengthCB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedLengthCB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedFluorescence1CB.isSelected() ) ) 
                    selectedSource = combinedLengthCB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence1CB.getText();
             
             else if( (combinedLengthCB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedLengthCB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence2CB.getText();
             
             else if( (combinedLengthCB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedAreaCB.isSelected() ) ) 
                    selectedSource = combinedLengthCB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedLengthCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedLengthCB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedFluorescence2CB.getText();

             else if( (combinedLengthCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedLengthCB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedAreaCB.getText();
             
             else if( (combinedLengthCB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) && ( combinedAreaCB.isSelected() ) )
                    selectedSource = combinedLengthCB.getText() + ":" + combinedFluorescence2CB.getText() + ":" + combinedAreaCB.getText();
             
            else
                    selectedSource = combinedLengthCB.getText();  
        //------------------------ End choice possibilities for lengthCB-CheckBox-Button ------------------------------------------------------------
        
        //------------------------ Begin choice possibilities for area-CheckBox-Button --------------------------------------------------------
        } else if ( (source == combinedAreaCB) ) {
            if( (combinedAreaCB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) ) 
                    selectedSource = combinedAreaCB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText();
            
             else if((combinedAreaCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) ) 
                    selectedSource = combinedAreaCB.getText() + ":" + combinedFluorescence1CB.getText();
             
             else if((combinedAreaCB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedAreaCB.getText() + ":" + combinedFluorescence2CB.getText();
             
             else if( (combinedAreaCB.isSelected()) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedAreaCB.getText() + ":" + combinedLengthCB.getText();
             
             else if( (combinedAreaCB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedFluorescence1CB.isSelected() ) ) 
                    selectedSource = combinedAreaCB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence1CB.getText();
             
             else if( (combinedAreaCB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedAreaCB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedFluorescence2CB.getText();
             
             else if( (combinedAreaCB.isSelected()) && ( combinedDijkstraShortestPathAlgorithmCB.isSelected() ) && ( combinedLengthCB.isSelected() ) ) 
                    selectedSource = combinedAreaCB.getText() + ":" + combinedDijkstraShortestPathAlgorithmCB.getText() + ":" + combinedLengthCB.getText();
             
             else if( (combinedAreaCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedFluorescence2CB.isSelected() ) ) 
                    selectedSource = combinedAreaCB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedFluorescence2CB.getText();

             else if( (combinedAreaCB.isSelected()) && ( combinedFluorescence1CB.isSelected() ) && ( combinedLengthCB.isSelected() ) )
                    selectedSource = combinedAreaCB.getText() + ":" + combinedFluorescence1CB.getText() + ":" + combinedLengthCB.getText();
             
             else if( (combinedAreaCB.isSelected()) && ( combinedFluorescence2CB.isSelected() ) && ( combinedLengthCB.isSelected() ) )
                    selectedSource = combinedAreaCB.getText() + ":" + combinedFluorescence2CB.getText() + ":" + combinedLengthCB.getText();
             
            else
                    selectedSource = combinedAreaCB.getText();  
        }
        //------------------------ End choice possibilities for area-CheckBox-Button ------------------------------------------------------------
    }

    
    /**
     * Gets the selected JRadioButton 
     * 
     * @return 
     */
    public String getSelectedSource() {
        return selectedSource;
    }

	public Map<String, Double> getThresholds() {
		return thresholds;
	}
}
