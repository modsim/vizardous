    /*
 * To change this template, chooser Tools | Templates
 * and open the template in the editor.
 */
package vizardous.delegate;

import Glacier2.CannotCreateSessionException;
import Glacier2.PermissionDeniedException;
import edu.uci.ics.jung.visualization.control.CrossoverScalingControl;
import edu.uci.ics.jung.visualization.control.ScalingControl;

import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutionException;

import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;
import javax.swing.table.TableModel;

import jxl.write.WriteException;
import omero.ServerError;
import vizardous.delegate.analysis.PhyloTreeAnalyser;
import vizardous.delegate.analysis.VisualAnalysisSettingsJDialog;
import vizardous.delegate.comparison.VisualComparisonSettings;
import vizardous.delegate.graphics.CellAreaDistributionChart2D;
import vizardous.delegate.graphics.CellLengthDistributionChart2D;
import vizardous.delegate.graphics.ComparisonGrowthCurveChart2D;
import vizardous.delegate.graphics.ComparisonGrowthRateChart2D;
import vizardous.delegate.graphics.PopulationDivisionTimesDistributionChart2D;
import vizardous.delegate.graphics.TraceChart2D;
import vizardous.delegate.graphics.export.Clipping;
import vizardous.delegate.graphics.export.GraphicsExporter;
import vizardous.delegate.graphics.util.PrintUtilities;
import vizardous.delegate.table.CellsComparisonTable;
import vizardous.model.Cell;
import vizardous.model.Clade;
import vizardous.model.DataModel;
import vizardous.model.Forest;
import vizardous.model.MetaXMLException;
import vizardous.model.PhyloXMLException;
import vizardous.omeroserver.gui.Login;
import vizardous.omeroserver.impl.OMEROServer;

/**
 * The main frame of Vizardous.
 *
 * @author Charaf E. Azzouzi <c.azzouzi@fz-juelich.de>
 * @author Stefan Helfrich <s.helfrich@fz-juelich.de>
 */
public class MainView extends javax.swing.JFrame implements PropertyChangeListener, InternalFrameListener {

    private Map<File, File>     fileListToBeImported    = null;
    private static File         phyloxmlFile            = null;
    private static File         metaMLFile             = null;
    private static MainView     _vizardous              = null; 
    private ExtendedDesktopPane extendDesk              = null;
    private OMEROServer         omeroServer             = null;
    private Login               login                   = null;
    private File                userDirectory           = null;
    private DataModel           newDataModel            = null;
    private String              lineChart               = "line";
    private String              histoChart              = "histogram";
    private List<PhyloTreeAnalyser>  listphyloTreeAnalyser   = null;
    private Map<String, Double> thresholds = null;
    private JScrollPane         cellsComparisonTabScrollPaneCopie            = null;
    private ProgressMonitor 	progressMonitor;
    private CellsComparisonTable cellsComaparisonTable = null;
    
    /** The {@link Logger} for this class. */
    final Logger logger = LoggerFactory.getLogger(MainView.class);
    
    /**
     * Creates new form MainView
     */
    public MainView() {
        fileListToBeImported = new HashMap<File, File>();
        listphyloTreeAnalyser   = new ArrayList<PhyloTreeAnalyser>();           
        initComponents();
        getDesktopPane();
        jl_seletedFile3.setVisible(false);
        jl_seletedFile4.setVisible(false);
        mainMenuTabbedPane.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar2 = new javax.swing.JToolBar();
        openFileBtn = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        connectionButton = new javax.swing.JButton();
        disconnectionButton = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        exportLineageTreeBar = new javax.swing.JButton();
        exportChartsBar1 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        zoomInTBar1 = new javax.swing.JButton();
        zoomOutTBar1 = new javax.swing.JButton();
        fitToViewBarJMenuItem = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        tileVerticalBarItem = new javax.swing.JButton();
        tileHorizentalBarItem = new javax.swing.JButton();
        cascadeBarItem = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        printBar1 = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        helpBar1 = new javax.swing.JButton();
        mainMenuTabbedPane = new javax.swing.JTabbedPane();
        welcomePanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel_JuelichLogo = new javax.swing.JLabel();
        jLabel_IBG1Logo = new javax.swing.JLabel();
        jLabel_IBG1Bild = new javax.swing.JLabel();
        jLabel_IBG1Text1 = new javax.swing.JLabel();
        jLabel_LogoLeiste = new javax.swing.JLabel();
        jLabel_IBG1Text2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        navigatorPanel = new javax.swing.JPanel();
        fileChooserPanel = new javax.swing.JPanel();
        //Locale loc = Locale.ENGLISH;
        //JFileChooser.setDefaultLocale(loc);
        jFileChooserInNavigator = new javax.swing.JFileChooser();
        jPanel11 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jl_seletedFile3 = new javax.swing.JLabel();
        jl_seletedFile4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableforImportFiles = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        addFileToImportTable = new javax.swing.JButton();
        deleteFileFromImportTable = new javax.swing.JButton();
        deleteAllFilesInImportTable = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        importAllFilesInTable = new javax.swing.JButton();
        cancelAll = new javax.swing.JButton();
        viewPanel = new javax.swing.JPanel();
        helpPanel = new javax.swing.JPanel();
        fileMenuHelp = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        selectMenuHelp = new javax.swing.JPanel();
        jLabel49 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        helpMenuHelp = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        viewtMenuHelp = new javax.swing.JPanel();
        jLabel56 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        viewtMenuHelp1 = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        viewtMenuHelp2 = new javax.swing.JPanel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        exitPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        OpenMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        connectMenuItem = new javax.swing.JMenuItem();
        disconnectMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        exportLineageTreeMenuItem = new javax.swing.JMenuItem();
        exportDiagrammsMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        exportYFPFluorescence = new javax.swing.JMenuItem();
        exportCrimsonFluorescence = new javax.swing.JMenuItem();
        ExportLengthChartsjMenu = new javax.swing.JMenu();
        cellLengthjMenuItem2 = new javax.swing.JMenuItem();
        ExportPopulationCellLengthDistribution = new javax.swing.JMenuItem();
        areaChartsjMenu = new javax.swing.JMenu();
        exportSingleCellArea = new javax.swing.JMenuItem();
        exportPopulationAreaDistribution = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        exportSingleCellDivisionTimes = new javax.swing.JMenuItem();
        exportPopulationDivisionTimes = new javax.swing.JMenuItem();
        exportPopulationDivisionTimesDistribution = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        printMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        selectMenu = new javax.swing.JMenu();
        selectRootMenuItem = new javax.swing.JMenuItem();
        selectAllLeavesMenuItem = new javax.swing.JMenuItem();
        selectAllNodesMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        zoomInMenuItem = new javax.swing.JMenuItem();
        zoomOutMenuItem = new javax.swing.JMenuItem();
        fitToViewjMenuItem = new javax.swing.JMenuItem();
        analysisMenu = new javax.swing.JMenu();
        visualAnalysisMenu = new javax.swing.JMenuItem();
        comparisonGrowthCurveChartMenuItem = new javax.swing.JMenuItem();
        comparisonGrowthRateChartMenuItem = new javax.swing.JMenuItem();
        tileHorizontalMeniItem = new javax.swing.JMenu();
        tileVerticalMenuItem = new javax.swing.JMenuItem();
        tileHorizontalMenuItem = new javax.swing.JMenuItem();
        cascadeMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItemHelp = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vizardous");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainFrame"); // NOI18N

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);
        jToolBar2.setMaximumSize(new java.awt.Dimension(272, 1024));

        openFileBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/file_open_24x24.png"))); // NOI18N
        openFileBtn.setToolTipText("open file");
        openFileBtn.setFocusable(false);
        openFileBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFileBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileBtnActionPerformed(evt);
            }
        });
        jToolBar2.add(openFileBtn);
        jToolBar2.add(jSeparator10);

        connectionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/2.png"))); // NOI18N
        connectionButton.setToolTipText("connect");
        connectionButton.setFocusable(false);
        connectionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        connectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(connectionButton);

        disconnectionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/3.png"))); // NOI18N
        disconnectionButton.setToolTipText("disconnect");
        disconnectionButton.setFocusable(false);
        disconnectionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        disconnectionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        disconnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectionButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(disconnectionButton);
        jToolBar2.add(jSeparator8);

        exportLineageTreeBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/treeChart24x24.png"))); // NOI18N
        exportLineageTreeBar.setToolTipText("Export tree");
        exportLineageTreeBar.setFocusable(false);
        exportLineageTreeBar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportLineageTreeBar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportLineageTreeBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLineageTreeBarActionPerformed(evt);
            }
        });
        jToolBar2.add(exportLineageTreeBar);

        exportChartsBar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/chart-icon24x24.png"))); // NOI18N
        exportChartsBar1.setToolTipText("Export charts");
        exportChartsBar1.setFocusable(false);
        exportChartsBar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportChartsBar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportChartsBar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportChartsBar1ActionPerformed(evt);
            }
        });
        jToolBar2.add(exportChartsBar1);
        jToolBar2.add(jSeparator6);

        zoomInTBar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/zoom_in24x24.png"))); // NOI18N
        zoomInTBar1.setToolTipText("zoom In");
        zoomInTBar1.setFocusable(false);
        zoomInTBar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInTBar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInTBar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInTBar1ActionPerformed(evt);
            }
        });
        jToolBar2.add(zoomInTBar1);

        zoomOutTBar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/zoom_out24x24.png"))); // NOI18N
        zoomOutTBar1.setToolTipText("zoom Out");
        zoomOutTBar1.setFocusable(false);
        zoomOutTBar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutTBar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutTBar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutTBar1ActionPerformed(evt);
            }
        });
        jToolBar2.add(zoomOutTBar1);

        fitToViewBarJMenuItem.setEnabled(false);
        fitToViewBarJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/zoom_best_fit22x22.png"))); // NOI18N
        fitToViewBarJMenuItem.setToolTipText("Fit to view");
        fitToViewBarJMenuItem.setFocusable(false);
        fitToViewBarJMenuItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fitToViewBarJMenuItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fitToViewBarJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitToViewBarJMenuItemActionPerformed(evt);
            }
        });
        jToolBar2.add(fitToViewBarJMenuItem);
        jToolBar2.add(jSeparator7);

        tileVerticalBarItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/tile_horizontal_16x16.png"))); // NOI18N
        tileVerticalBarItem.setFocusable(false);
        tileVerticalBarItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tileVerticalBarItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tileVerticalBarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tileVerticalBarItemActionPerformed(evt);
            }
        });
        jToolBar2.add(tileVerticalBarItem);

        tileHorizentalBarItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/tile_vertical_16x16.png"))); // NOI18N
        tileHorizentalBarItem.setFocusable(false);
        tileHorizentalBarItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tileHorizentalBarItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tileHorizentalBarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tileHorizentalBarItemActionPerformed(evt);
            }
        });
        jToolBar2.add(tileHorizentalBarItem);

        cascadeBarItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/cascade-icon_16x16.png"))); // NOI18N
        cascadeBarItem.setFocusable(false);
        cascadeBarItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cascadeBarItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cascadeBarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cascadeBarItemActionPerformed(evt);
            }
        });
        jToolBar2.add(cascadeBarItem);
        jToolBar2.add(jSeparator11);

        printBar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/print_printer24x24.png"))); // NOI18N
        printBar1.setToolTipText("Print..");
        printBar1.setFocusable(false);
        printBar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        printBar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        printBar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBar1ActionPerformed(evt);
            }
        });
        jToolBar2.add(printBar1);
        jToolBar2.add(jSeparator9);

        helpBar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_help24x24.png"))); // NOI18N
        helpBar1.setToolTipText("Help");
        helpBar1.setFocusable(false);
        helpBar1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        helpBar1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        helpBar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBar1ActionPerformed(evt);
            }
        });
        jToolBar2.add(helpBar1);

        mainMenuTabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        mainMenuTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        mainMenuTabbedPane.setAutoscrolls(true);
        mainMenuTabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainMenuTabbedPane.setMaximumSize(new java.awt.Dimension(1280, 1024));
        mainMenuTabbedPane.setPreferredSize(new java.awt.Dimension(1280, 777));
        mainMenuTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainMenuTabbedPaneStateChanged(evt);
            }
        });

        welcomePanel.setBackground(new java.awt.Color(255, 255, 255));
        welcomePanel.setToolTipText("");
        welcomePanel.setMaximumSize(new java.awt.Dimension(1000, 1024));
        welcomePanel.setPreferredSize(new java.awt.Dimension(950, 718));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setMaximumSize(new java.awt.Dimension(1280, 1024));
        jPanel8.setPreferredSize(new java.awt.Dimension(1000, 700));

        jLabel_JuelichLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/fzj-logo.jpg"))); // NOI18N

        jLabel_IBG1Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/startseite_4.png"))); // NOI18N
        jLabel_IBG1Logo.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel_IBG1Bild.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/startseite_1.gif"))); // NOI18N

        jLabel_IBG1Text1.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        jLabel_IBG1Text1.setText("Institute of Bio- and Geosciences");

        jLabel_LogoLeiste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/fjz_leiste_1.png"))); // NOI18N
        jLabel_LogoLeiste.setPreferredSize(new java.awt.Dimension(29, 777));

        jLabel_IBG1Text2.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        jLabel_IBG1Text2.setText("Biotechnology (IBG-1)");

        jLabel4.setFont(new java.awt.Font("Georgia", 0, 24)); // NOI18N
        jLabel4.setText("Vizardous: An interactive tool for visualization and analysis");

        jLabel5.setFont(new java.awt.Font("Georgia", 0, 24)); // NOI18N
        jLabel5.setText("                            of Microbial Phylogenies  ");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel_LogoLeiste, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel_IBG1Text1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_IBG1Logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_IBG1Text2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(85, 85, 85)))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_JuelichLogo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_IBG1Bild, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(30, 30, 30))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_IBG1Logo)
                    .addComponent(jLabel_JuelichLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_IBG1Text1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_IBG1Text2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_IBG1Bild, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel_LogoLeiste, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1198, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout welcomePanelLayout = new javax.swing.GroupLayout(welcomePanel);
        welcomePanel.setLayout(welcomePanelLayout);
        welcomePanelLayout.setHorizontalGroup(
            welcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 1140, Short.MAX_VALUE)
        );
        welcomePanelLayout.setVerticalGroup(
            welcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomePanelLayout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 1198, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainMenuTabbedPane.addTab("Welcome", new javax.swing.ImageIcon(getClass().getResource("/icons/startseite_5_48x48.gif")), welcomePanel, "Welcome"); // NOI18N

        navigatorPanel.setToolTipText("");
        navigatorPanel.setMaximumSize(new java.awt.Dimension(950, 1024));
        navigatorPanel.setPreferredSize(new java.awt.Dimension(950, 775));

        fileChooserPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        fileChooserPanel.setMaximumSize(new java.awt.Dimension(1280, 1000));
        fileChooserPanel.setPreferredSize(new java.awt.Dimension(570, 400));

        javax.swing.filechooser.FileSystemView fw = jFileChooserInNavigator.getFileSystemView();
        userDirectory = fw.getDefaultDirectory();
        jFileChooserInNavigator.setCurrentDirectory(userDirectory);
        jFileChooserInNavigator.setApproveButtonText("Select File1");
        jFileChooserInNavigator.setApproveButtonToolTipText("");
        jFileChooserInNavigator.setDialogTitle("");
        jFileChooserInNavigator.setFileFilter(new FileNameExtensionFilter("PhyloXML/MetaML Files", "xml"));
        jFileChooserInNavigator.setMaximumSize(new java.awt.Dimension(1280, 1024));
        jFileChooserInNavigator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserInNavigator(evt);
            }
        });

        jPanel11.setMaximumSize(new java.awt.Dimension(1280, 1024));

        jLabel35.setText("PhyloXML File");

        jLabel36.setText("MetaXML File");

        jl_seletedFile3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/Yes.png"))); // NOI18N
        jl_seletedFile3.setText("OK");

        jl_seletedFile4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/Apply.png"))); // NOI18N
        jl_seletedFile4.setText("OK");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jl_seletedFile4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jl_seletedFile3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_seletedFile3)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_seletedFile4))
                .addContainerGap())
        );

        javax.swing.GroupLayout fileChooserPanelLayout = new javax.swing.GroupLayout(fileChooserPanel);
        fileChooserPanel.setLayout(fileChooserPanelLayout);
        fileChooserPanelLayout.setHorizontalGroup(
            fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
            .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserPanelLayout.createSequentialGroup()
                    .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jFileChooserInNavigator, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(fileChooserPanelLayout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        fileChooserPanelLayout.setVerticalGroup(
            fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jFileChooserInNavigator, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setMaximumSize(new java.awt.Dimension(1280, 1000));
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 400));

        jPanel9.setMaximumSize(new java.awt.Dimension(1280, 1024));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(1280, 1024));

        TableModel myTabModelForImportFiles = new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PhyloXML-File", "Size", "MetaXML-File", "Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        tableforImportFiles.setModel(myTabModelForImportFiles);
        tableforImportFiles.setPreferredSize(null);
        jScrollPane1.setViewportView(tableforImportFiles);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMaximumSize(new java.awt.Dimension(1280, 1000));

        addFileToImportTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Small-arrow-right-icon32x32.png"))); // NOI18N
        addFileToImportTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileToImportTableActionPerformed(evt);
            }
        });

        deleteFileFromImportTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Small-arrow-left-icon32x32.png"))); // NOI18N
        deleteFileFromImportTable.setEnabled(false);
        deleteFileFromImportTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFileFromImportTableActionPerformed(evt);
            }
        });

        deleteAllFilesInImportTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Small-arrow-left-fast-rewind-icon32x32.png"))); // NOI18N
        deleteAllFilesInImportTable.setEnabled(false);
        deleteAllFilesInImportTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllFilesInImportTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addFileToImportTable)
                    .addComponent(deleteFileFromImportTable)
                    .addComponent(deleteAllFilesInImportTable))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(addFileToImportTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteFileFromImportTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteAllFilesInImportTable)
                .addContainerGap(211, Short.MAX_VALUE))
        );

        importAllFilesInTable.setText("Import");
        importAllFilesInTable.setMaximumSize(new java.awt.Dimension(81, 27));
        importAllFilesInTable.setMinimumSize(new java.awt.Dimension(81, 27));
        importAllFilesInTable.setPreferredSize(new java.awt.Dimension(81, 27));
        importAllFilesInTable.setRequestFocusEnabled(false);
        importAllFilesInTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importAllFilesInTableActionPerformed(evt);
            }
        });

        cancelAll.setText("Cancel All");
        cancelAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancellAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importAllFilesInTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importAllFilesInTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelAll)))
        );

        javax.swing.GroupLayout navigatorPanelLayout = new javax.swing.GroupLayout(navigatorPanel);
        navigatorPanel.setLayout(navigatorPanelLayout);
        navigatorPanelLayout.setHorizontalGroup(
            navigatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navigatorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(navigatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(navigatorPanelLayout.createSequentialGroup()
                        .addComponent(fileChooserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)))
                .addGap(24, 24, 24))
        );
        navigatorPanelLayout.setVerticalGroup(
            navigatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navigatorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(navigatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileChooserPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );

        mainMenuTabbedPane.addTab("Navigator   ", new javax.swing.ImageIcon(getClass().getResource("/icons/system_file_manager48x48.png")), navigatorPanel, "Navigator"); // NOI18N

        viewPanel.setToolTipText("");
        viewPanel.setMaximumSize(new java.awt.Dimension(950, 1024));
        viewPanel.setPreferredSize(new java.awt.Dimension(950, 775));

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1140, Short.MAX_VALUE)
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 708, Short.MAX_VALUE)
        );

        mainMenuTabbedPane.addTab("View          ", new javax.swing.ImageIcon(getClass().getResource("/icons16x16/treeChart48x48.png")), viewPanel, "View"); // NOI18N

        helpPanel.setToolTipText("");
        helpPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        helpPanel.setMaximumSize(new java.awt.Dimension(1000, 1024));
        helpPanel.setPreferredSize(new java.awt.Dimension(1000, 718));

        fileMenuHelp.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "File menu"));
        fileMenuHelp.setMaximumSize(new java.awt.Dimension(1280, 1024));
        fileMenuHelp.setPreferredSize(new java.awt.Dimension(950, 196));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/file_open_16x16.png"))); // NOI18N

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/treeChart16x16.png"))); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/dtopChart.png"))); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/print_printer16x16.png"))); // NOI18N

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/Exit.png"))); // NOI18N

        jLabel12.setText("Export phyloTree");

        jLabel13.setText("Open files");

        jLabel14.setText("Export chart");

        jLabel16.setText("Print..");

        jLabel17.setText("Exit");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Option:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("Function");

        jLabel20.setText("Display a dialog to open the pyhloXML and the metaML files. ");

        jLabel21.setText("Display a dialog to export the tree in the currently focused file to a graphic file (e.g. png, jpeg and svg) or a PDF.");

        jLabel22.setText("Display a dialog to export the generated diagramms in the currently focused file to a graphic file (e.g. png, jpeg and svg) or a PDF.");

        jLabel24.setText("Allows you to print the tree or diagramms in the currently focused file.");

        jLabel25.setText("Allows you to terminate this programm.");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/2.png"))); // NOI18N

        jLabel38.setText("Connect");

        jLabel39.setText("Connect to OMERO server.");

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/3.png"))); // NOI18N

        jLabel40.setText("Disconnect");

        jLabel41.setText("Disconnect from OMERO server.");

        javax.swing.GroupLayout fileMenuHelpLayout = new javax.swing.GroupLayout(fileMenuHelp);
        fileMenuHelp.setLayout(fileMenuHelpLayout);
        fileMenuHelpLayout.setHorizontalGroup(
            fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileMenuHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileMenuHelpLayout.createSequentialGroup()
                        .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(fileMenuHelpLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(fileMenuHelpLayout.createSequentialGroup()
                        .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(fileMenuHelpLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(fileMenuHelpLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        fileMenuHelpLayout.setVerticalGroup(
            fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileMenuHelpLayout.createSequentialGroup()
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(fileMenuHelpLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2))
                    .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jLabel20)))
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(fileMenuHelpLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(2, 2, 2))
                    .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel38)
                        .addComponent(jLabel39)))
                .addGap(3, 3, 3)
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(fileMenuHelpLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(2, 2, 2))
                    .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel40)
                        .addComponent(jLabel41)))
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6)
                    .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(jLabel21)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(jLabel24)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25)
                        .addComponent(jLabel17))
                    .addComponent(jLabel11))
                .addGap(0, 0, 0))
        );

        selectMenuHelp.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Select menu"));
        selectMenuHelp.setMaximumSize(new java.awt.Dimension(1280, 1024));

        jLabel49.setText("Select root cells of lineage trees in active window.");

        jLabel44.setText("Select root");

        jLabel46.setText("Select all");

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel43.setText("Function");

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel42.setText("Option:");

        jLabel47.setText("Select all cells in lineage trees in active window.");

        jLabel48.setText("Select leafs cells of lineage trees in active window.");

        jLabel45.setText("Select leafs");

        jLabel52.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/shapes_many_select.png"))); // NOI18N

        jLabel50.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/shape_square_select.png"))); // NOI18N

        jLabel51.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/shapes_many_select.png"))); // NOI18N

        javax.swing.GroupLayout selectMenuHelpLayout = new javax.swing.GroupLayout(selectMenuHelp);
        selectMenuHelp.setLayout(selectMenuHelpLayout);
        selectMenuHelpLayout.setHorizontalGroup(
            selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectMenuHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectMenuHelpLayout.createSequentialGroup()
                        .addGroup(selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(selectMenuHelpLayout.createSequentialGroup()
                                .addGroup(selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel51)
                                    .addComponent(jLabel52))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, selectMenuHelpLayout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(75, 75, 75))
                    .addGroup(selectMenuHelpLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(selectMenuHelpLayout.createSequentialGroup()
                                .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(selectMenuHelpLayout.createSequentialGroup()
                                .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel47, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        selectMenuHelpLayout.setVerticalGroup(
            selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectMenuHelpLayout.createSequentialGroup()
                .addComponent(jLabel42)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel50)
                .addGap(2, 2, 2)
                .addComponent(jLabel51)
                .addGap(2, 2, 2)
                .addComponent(jLabel52))
            .addGroup(selectMenuHelpLayout.createSequentialGroup()
                .addComponent(jLabel43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(jLabel49))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(jLabel48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(jLabel47)))
        );

        helpMenuHelp.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Help menu"));
        helpMenuHelp.setMaximumSize(new java.awt.Dimension(1280, 1024));
        helpMenuHelp.setPreferredSize(new java.awt.Dimension(950, 106));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel26.setText("Option:");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setText("Function");

        jLabel28.setText("Takes you to this Help-Page.");

        jLabel29.setText("Help");
        jLabel29.setMaximumSize(new java.awt.Dimension(18, 14));
        jLabel29.setMinimumSize(new java.awt.Dimension(18, 14));
        jLabel29.setPreferredSize(new java.awt.Dimension(18, 14));

        jLabel30.setText("About");

        jLabel31.setText("Displays the About-dialog of Vizardous which contains information about the program.");

        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_information16x16.png"))); // NOI18N

        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_help16x16.png"))); // NOI18N

        javax.swing.GroupLayout helpMenuHelpLayout = new javax.swing.GroupLayout(helpMenuHelp);
        helpMenuHelp.setLayout(helpMenuHelpLayout);
        helpMenuHelpLayout.setHorizontalGroup(
            helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpMenuHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(helpMenuHelpLayout.createSequentialGroup()
                        .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel32, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(204, 204, 204))
        );
        helpMenuHelpLayout.setVerticalGroup(
            helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpMenuHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel27)
                        .addComponent(jLabel26))
                    .addGroup(helpMenuHelpLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel33)
                            .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel28)
                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(helpMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel31)
                                .addComponent(jLabel30))
                            .addComponent(jLabel32))))
                .addGap(0, 0, 0))
        );

        viewtMenuHelp.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "View menu"));
        viewtMenuHelp.setMaximumSize(new java.awt.Dimension(1280, 1024));

        jLabel56.setText("Zoom in");

        jLabel59.setText("Displays the lineage trees in active window in original size.");

        jLabel57.setText("Zoom out the lineage trees in active window.");

        jLabel61.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/_zoom_best_fit.png"))); // NOI18N

        jLabel62.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/zoom_out (1).png"))); // NOI18N

        jLabel58.setText("Zoom in the lineage trees in active window.");

        jLabel53.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel53.setText("Option:");

        jLabel55.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/zoom_in.png"))); // NOI18N

        jLabel54.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel54.setText("Function");

        jLabel60.setText("Fit to view");

        jLabel63.setText("Zoom out");

        javax.swing.GroupLayout viewtMenuHelpLayout = new javax.swing.GroupLayout(viewtMenuHelp);
        viewtMenuHelp.setLayout(viewtMenuHelpLayout);
        viewtMenuHelpLayout.setHorizontalGroup(
            viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewtMenuHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewtMenuHelpLayout.createSequentialGroup()
                        .addGroup(viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel53, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(viewtMenuHelpLayout.createSequentialGroup()
                                .addGroup(viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel62)
                                    .addComponent(jLabel61))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, viewtMenuHelpLayout.createSequentialGroup()
                                .addComponent(jLabel55)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel54, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel57, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))))
                        .addGap(95, 95, 95))
                    .addGroup(viewtMenuHelpLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewtMenuHelpLayout.createSequentialGroup()
                                .addComponent(jLabel63, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel58, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(viewtMenuHelpLayout.createSequentialGroup()
                                .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel59, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        viewtMenuHelpLayout.setVerticalGroup(
            viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewtMenuHelpLayout.createSequentialGroup()
                .addComponent(jLabel53)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel55)
                .addGap(2, 2, 2)
                .addComponent(jLabel62)
                .addGap(2, 2, 2)
                .addComponent(jLabel61))
            .addGroup(viewtMenuHelpLayout.createSequentialGroup()
                .addComponent(jLabel54)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel56)
                    .addComponent(jLabel57))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel63)
                    .addComponent(jLabel58))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewtMenuHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel60)
                    .addComponent(jLabel59)))
        );

        viewtMenuHelp1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Analysis menu"));
        viewtMenuHelp1.setMaximumSize(new java.awt.Dimension(1280, 1024));

        jLabel64.setText("Visual analysis");

        jLabel65.setText("Provide a comparitive analysis for all lineage trees.");

        jLabel66.setText("Provide a visual analysis for all lineage trees.");

        jLabel70.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel70.setText("Option:");

        jLabel72.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel72.setText("Function");

        jLabel73.setText("Comparison");

        javax.swing.GroupLayout viewtMenuHelp1Layout = new javax.swing.GroupLayout(viewtMenuHelp1);
        viewtMenuHelp1.setLayout(viewtMenuHelp1Layout);
        viewtMenuHelp1Layout.setHorizontalGroup(
            viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                        .addGroup(viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel70, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                                .addGroup(viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel71)
                                    .addComponent(jLabel68)
                                    .addComponent(jLabel67))
                                .addGap(22, 22, 22)
                                .addComponent(jLabel64, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(41, 41, 41)))
                .addGroup(viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                        .addGroup(viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel66, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                        .addComponent(jLabel65, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10))))
        );
        viewtMenuHelp1Layout.setVerticalGroup(
            viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                .addComponent(jLabel70)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel71)
                .addGap(2, 2, 2)
                .addComponent(jLabel68)
                .addGap(2, 2, 2)
                .addComponent(jLabel67))
            .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                .addGroup(viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel64)
                    .addGroup(viewtMenuHelp1Layout.createSequentialGroup()
                        .addComponent(jLabel72)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel66)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewtMenuHelp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel73)
                    .addComponent(jLabel65)))
        );

        viewtMenuHelp2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Window menu"));
        viewtMenuHelp2.setMaximumSize(new java.awt.Dimension(1280, 1024));

        jLabel75.setText("Tile vertical");

        jLabel76.setText("Arranges all windows on top of each other.");

        jLabel77.setText("Arranges all windows in rows.");

        jLabel80.setText("Arranges all windows in columns.");

        jLabel81.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel81.setText("Option:");

        jLabel83.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel83.setText("Function");

        jLabel84.setText("Cascade");

        jLabel85.setText("Tile horizontal");

        jLabel78.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/tile_horizontal_16x16.png"))); // NOI18N

        jLabel79.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/tile_vertical_16x16.png"))); // NOI18N

        jLabel86.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/cascade-icon_16x16.png"))); // NOI18N

        javax.swing.GroupLayout viewtMenuHelp2Layout = new javax.swing.GroupLayout(viewtMenuHelp2);
        viewtMenuHelp2.setLayout(viewtMenuHelp2Layout);
        viewtMenuHelp2Layout.setHorizontalGroup(
            viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                        .addComponent(jLabel82)
                        .addGap(134, 134, 134)
                        .addComponent(jLabel83, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(95, 95, 95))
                    .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                        .addGroup(viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel79)
                                .addComponent(jLabel86))
                            .addComponent(jLabel78, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                                .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel80, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                                .addComponent(jLabel84, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel76, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                                .addComponent(jLabel75, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel77, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                        .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewtMenuHelp2Layout.setVerticalGroup(
            viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                .addComponent(jLabel81)
                .addGroup(viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel82))
                    .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel78)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel79)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel86))))
            .addGroup(viewtMenuHelp2Layout.createSequentialGroup()
                .addComponent(jLabel83)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel75)
                    .addComponent(jLabel77))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel85)
                    .addComponent(jLabel80))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewtMenuHelp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel84)
                    .addComponent(jLabel76)))
        );

        javax.swing.GroupLayout helpPanelLayout = new javax.swing.GroupLayout(helpPanel);
        helpPanel.setLayout(helpPanelLayout);
        helpPanelLayout.setHorizontalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(helpPanelLayout.createSequentialGroup()
                        .addComponent(helpMenuHelp, javax.swing.GroupLayout.DEFAULT_SIZE, 1120, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(helpPanelLayout.createSequentialGroup()
                        .addComponent(fileMenuHelp, javax.swing.GroupLayout.DEFAULT_SIZE, 1119, Short.MAX_VALUE)
                        .addGap(11, 11, 11))
                    .addGroup(helpPanelLayout.createSequentialGroup()
                        .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(viewtMenuHelp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectMenuHelp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(viewtMenuHelp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewtMenuHelp2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        helpPanelLayout.setVerticalGroup(
            helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(fileMenuHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectMenuHelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewtMenuHelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(helpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewtMenuHelp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewtMenuHelp2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(helpMenuHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );

        mainMenuTabbedPane.addTab("Help          ", new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_help48x48.png")), helpPanel, "Help"); // NOI18N

        exitPanel.setBackground(new java.awt.Color(255, 255, 255));
        exitPanel.setToolTipText("Exit");
        exitPanel.setMaximumSize(new java.awt.Dimension(1000, 1024));
        exitPanel.setPreferredSize(new java.awt.Dimension(1000, 718));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/dt_blau_1920x1200br.jpg"))); // NOI18N
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel2.setPreferredSize(new java.awt.Dimension(1000, 718));

        javax.swing.GroupLayout exitPanelLayout = new javax.swing.GroupLayout(exitPanel);
        exitPanel.setLayout(exitPanelLayout);
        exitPanelLayout.setHorizontalGroup(
            exitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitPanelLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1231, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        exitPanelLayout.setVerticalGroup(
            exitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 708, Short.MAX_VALUE)
        );

        mainMenuTabbedPane.addTab("Exit             ", new javax.swing.ImageIcon(getClass().getResource("/icons/exit[4].png")), exitPanel, "Exit"); // NOI18N

        jMenuBar1.setMaximumSize(new java.awt.Dimension(132, 1024));

        fileMenu.setText("File");
        
        OpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/file_open_16x16.png"))); // NOI18N
        OpenMenuItem.setMnemonic('a');
        OpenMenuItem.setText("Open files");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(OpenMenuItem);
        fileMenu.add(jSeparator2);

        connectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        connectMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/2.png"))); // NOI18N
        connectMenuItem.setText("Connect");
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(connectMenuItem);

        disconnectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        disconnectMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/3.png"))); // NOI18N
        disconnectMenuItem.setText("Disconnect");
        disconnectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(disconnectMenuItem);
        fileMenu.add(jSeparator4);

        exportLineageTreeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        exportLineageTreeMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/treeChart16x16.png"))); // NOI18N
        exportLineageTreeMenuItem.setText("Export phyloTree");
        exportLineageTreeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLineageTreeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportLineageTreeMenuItem);

        exportDiagrammsMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/dtopChart.png"))); // NOI18N
        exportDiagrammsMenu.setText("Export chart");
        exportDiagrammsMenu.setActionCommand("Export Diagram of");

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/fluorChart2.png"))); // NOI18N
        jMenu1.setText("Fluorescences");

        exportYFPFluorescence.setText("yfp-Fluorescence");
        exportYFPFluorescence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportYFPFluorescenceActionPerformed(evt);
            }
        });
        jMenu1.add(exportYFPFluorescence);

        exportCrimsonFluorescence.setText("crimson-Fluorescence");
        exportCrimsonFluorescence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCrimsonFluorescenceActionPerformed(evt);
            }
        });
        jMenu1.add(exportCrimsonFluorescence);

        exportDiagrammsMenu.add(jMenu1);

        ExportLengthChartsjMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/lengthChart.png"))); // NOI18N
        ExportLengthChartsjMenu.setText("Length charts");

        cellLengthjMenuItem2.setText("Cell length");
        cellLengthjMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCellLengthActionPerformed(evt);
            }
        });
        ExportLengthChartsjMenu.add(cellLengthjMenuItem2);

        ExportPopulationCellLengthDistribution.setText("Cell length distribution");
        ExportPopulationCellLengthDistribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPopulationCellLengthDistributionActionPerformed(evt);
            }
        });
        ExportLengthChartsjMenu.add(ExportPopulationCellLengthDistribution);

        exportDiagrammsMenu.add(ExportLengthChartsjMenu);

        areaChartsjMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/AreaChart.png"))); // NOI18N
        areaChartsjMenu.setText("Area charts");

        exportSingleCellArea.setText("Cell area");
        exportSingleCellArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSingleCellAreaActionPerformed(evt);
            }
        });
        areaChartsjMenu.add(exportSingleCellArea);

        exportPopulationAreaDistribution.setText("Cell area distribution");
        exportPopulationAreaDistribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPopulationAreaDistributionActionPerformed(evt);
            }
        });
        areaChartsjMenu.add(exportPopulationAreaDistribution);

        exportDiagrammsMenu.add(areaChartsjMenu);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/dtopChart2.png"))); // NOI18N
        jMenu2.setText("Division times charts");

        exportSingleCellDivisionTimes.setText("Cell division times");
        exportSingleCellDivisionTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSingleCellDivisionTimesActionPerformed(evt);
            }
        });
        jMenu2.add(exportSingleCellDivisionTimes);

        exportPopulationDivisionTimes.setText("Population division times");
        exportPopulationDivisionTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPopulationDivisionTimes(evt);
            }
        });
        jMenu2.add(exportPopulationDivisionTimes);

        exportPopulationDivisionTimesDistribution.setText("Population division times distribution");
        exportPopulationDivisionTimesDistribution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPopulationDivisionTimesDistributionActionPerformed(evt);
            }
        });
        jMenu2.add(exportPopulationDivisionTimesDistribution);

        exportDiagrammsMenu.add(jMenu2);

        fileMenu.add(exportDiagrammsMenu);
        fileMenu.add(jSeparator3);

        printMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/print_printer16x16.png"))); // NOI18N
        printMenuItem.setText("Print...");
        printMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(printMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/Exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        selectMenu.setText("Select");

        selectAllLeavesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        selectAllLeavesMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/shapes_many_select.png"))); // NOI18N
        selectAllLeavesMenuItem.setText("Select leaves");
        selectAllLeavesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllLeavesMenuItemActionPerformed(evt);
            }
        });
        selectMenu.add(selectAllLeavesMenuItem);

        jMenuBar1.add(selectMenu);

        viewMenu.setText("View");

        zoomInMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, java.awt.event.InputEvent.CTRL_MASK));
        zoomInMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/zoom_in.png"))); // NOI18N
        zoomInMenuItem.setText("Zoom in");
        zoomInMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(zoomInMenuItem);

        zoomOutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.CTRL_MASK));
        zoomOutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/zoom_out (1).png"))); // NOI18N
        zoomOutMenuItem.setText("Zoom out");
        zoomOutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(zoomOutMenuItem);

        fitToViewjMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/_zoom_best_fit.png"))); // NOI18N
        fitToViewjMenuItem.setText("Fit to view");
        fitToViewjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitToViewjMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(fitToViewjMenuItem);

        jMenuBar1.add(viewMenu);

        analysisMenu.setText("Analysis");

        visualAnalysisMenu.setText("Visual Analysis");
        visualAnalysisMenu.setEnabled(false);
        visualAnalysisMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualAnalysisMenuActionPerformed(evt);
            }
        });
        analysisMenu.add(visualAnalysisMenu);

        comparisonGrowthCurveChartMenuItem.setText("Compare Growth Curve");
        comparisonGrowthCurveChartMenuItem.setEnabled(false);
        comparisonGrowthCurveChartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comparisonGrowthCurveChartMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(comparisonGrowthCurveChartMenuItem);

        comparisonGrowthRateChartMenuItem.setText("Compare Growth Rate");
        comparisonGrowthRateChartMenuItem.setEnabled(false);
        comparisonGrowthRateChartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comparisonGrowthRateChartMenuItemActionPerformed(evt);
            }
        });
        analysisMenu.add(comparisonGrowthRateChartMenuItem);

        jMenuBar1.add(analysisMenu);

        tileHorizontalMeniItem.setText("Window");

        tileVerticalMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/tile_horizontal_16x16.png"))); // NOI18N
        tileVerticalMenuItem.setText("Tile vertical");
        tileVerticalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tileVerticalMenuItemActionPerformed(evt);
            }
        });
        tileHorizontalMeniItem.add(tileVerticalMenuItem);

        tileHorizontalMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/tile_vertical_16x16.png"))); // NOI18N
        tileHorizontalMenuItem.setText("Tile horizontal");
        tileHorizontalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tileHorizontalMenuItemActionPerformed(evt);
            }
        });
        tileHorizontalMeniItem.add(tileHorizontalMenuItem);

        cascadeMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons16x16/cascade-icon_16x16.png"))); // NOI18N
        cascadeMenuItem.setText("Cascade");
        cascadeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cascadeMenuItemActionPerformed(evt);
            }
        });
        tileHorizontalMeniItem.add(cascadeMenuItem);

        jMenuBar1.add(tileHorizontalMeniItem);

        helpMenu.setText("Help");
        helpMenu.setMaximumSize(new java.awt.Dimension(33, 1024));

        jMenuItemHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItemHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_help16x16.png"))); // NOI18N
        jMenuItemHelp.setText("Help");
        jMenuItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItemHelp);

        jMenuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_information16x16.png"))); // NOI18N
        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItemAbout);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainMenuTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1270, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 1276, Short.MAX_VALUE)
                    .addGap(4, 4, 4)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(mainMenuTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 713, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 725, Short.MAX_VALUE)))
        );

        mainMenuTabbedPane.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private void init() {
        /** JScrollPane for visualization of the cell Information table. */
//        private JScrollPane             cellsComparisonTabScrollPane            = null;
//        cellsComparisonTabScrollPaneCopie = new JScrollPane();
//        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(cellsComparisonPanel);
//        cellsComparisonPanel.setLayout(jPanel4Layout);
//        jPanel4Layout.setHorizontalGroup(
//            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addComponent(cellsComparisonTabScrollPaneCopie, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
//            .addGroup(jPanel4Layout.createSequentialGroup()
//                )
//        );
//        jPanel4Layout.setVerticalGroup(
//            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(jPanel4Layout.createSequentialGroup()
//                .addComponent(cellsComparisonTabScrollPaneCopie, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
//                .addGap(10, 10, 10)
//                )
//        );
        
//        cellsComparisonTabScrollPane.setViewportView(cellCompTable);
    }
    
    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
         mainMenuTabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
            int n = JOptionPane.showConfirmDialog(
                    this, "Do you really want to exit the application?", "Exit Application",
                    JOptionPane.YES_NO_OPTION, 0, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_help32x32.png")));
            if(n == JOptionPane.YES_OPTION) {
                this.dispose();
            } else if(n == JOptionPane.NO_OPTION) {
                mainMenuTabbedPane.setSelectedIndex(2);
            } 
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMenuItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpActionPerformed
        mainMenuTabbedPane.setSelectedIndex(3);
    }//GEN-LAST:event_jMenuItemHelpActionPerformed

    private void exportLineageTreeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLineageTreeMenuItemActionPerformed
       if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            
            if (activeWindow == null) {
            	JOptionPane.showMessageDialog(this,
                        "Please select a window for export first.",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
            	return;
            }
            
            GraphicsExporter.exportLineageTree(activeWindow.getDrawedPhyloTreeList().get(0).getPhyloTreePanel(), Clipping.NONE);
                    
        } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
             return;
        }
    }//GEN-LAST:event_exportLineageTreeMenuItemActionPerformed

    private void printMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printMenuItemActionPerformed
        if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            
            if (activeWindow == null) {
            	JOptionPane.showMessageDialog(this,
                        "Please select a window for export first.",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
            }
            
            PrintUtilities printDiagramme = new PrintUtilities(activeWindow.getDrawedPhyloTreeList().get(0).getPhyloTreePanel());
            printDiagramme.print();
                    
        } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
        
    }//GEN-LAST:event_printMenuItemActionPerformed

    private void mainMenuTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainMenuTabbedPaneStateChanged
        if( mainMenuTabbedPane.getSelectedIndex() == 4 ) {
            int n = JOptionPane.showConfirmDialog(
                    this, "Do you really want to close the application?", "Exit Application",
                    JOptionPane.YES_NO_OPTION, 0, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_help32x32.png")));
            if( n == JOptionPane.YES_OPTION ) {
                this.dispose();
            } else if( n == JOptionPane.NO_OPTION ) {
                mainMenuTabbedPane.setSelectedIndex(2);
            } 
        }
    }//GEN-LAST:event_mainMenuTabbedPaneStateChanged

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        AboutJDialog infoPanel = new AboutJDialog(this, rootPaneCheckingEnabled);
        infoPanel.centerFrame();
        infoPanel.setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed
    
    private void jFileChooserInNavigator(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserInNavigator
        if( jFileChooserInNavigator.getApproveButtonText().equals("Select File1") ) {
            phyloxmlFile = jFileChooserInNavigator.getSelectedFile();
                jTextField4.setText(phyloxmlFile.getName());
                jl_seletedFile3.setVisible(true);
                jFileChooserInNavigator.setApproveButtonText("Select File2");
        } else if( jFileChooserInNavigator.getApproveButtonText().equals("Select File2") ) {
            metaMLFile = jFileChooserInNavigator.getSelectedFile();
            jTextField6.setText(metaMLFile.getName());
            jl_seletedFile4.setVisible(true);
            jFileChooserInNavigator.setApproveButtonText("Select File1");
        }
    }//GEN-LAST:event_jFileChooserInNavigator
    
    private void exportPopulationDivisionTimes(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPopulationDivisionTimes
        if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();//getAllFramesInLayer(0);
            PopulationDivisionTimesDistributionChart2D divisionTimesDistribution = activeWindow.
                    getDivisionTimeOfPopulationChart2D();
            GraphicsExporter.exportChart2D(divisionTimesDistribution, histoChart);
                    
        } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_exportPopulationDivisionTimes

    private void selectAllLeavesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllLeavesMenuItemActionPerformed
        if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            List<DrawPhyloTreeGraph> list = activeWindow.getDrawedPhyloTreeList();
            for( DrawPhyloTreeGraph ll: list) {
                activeWindow.getPopuMenu().addAllLeavesToTable(ll.getPhylogeny());
            }
                    
        } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_selectAllLeavesMenuItemActionPerformed

    private void zoomInMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInMenuItemActionPerformed
        if(newDataModel != null) {
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();  
            List<DrawPhyloTreeGraph> list = activeWindow.getDrawedPhyloTreeList();
            for( DrawPhyloTreeGraph ll: list) {
              ll.getPhyloTreePanel().zoomIn();
            }
          } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }  
    }//GEN-LAST:event_zoomInMenuItemActionPerformed

    private void zoomOutTBar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutTBar1ActionPerformed
         zoomOutMenuItemActionPerformed(evt);
    }//GEN-LAST:event_zoomOutTBar1ActionPerformed

    private void openFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileBtnActionPerformed
         mainMenuTabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_openFileBtnActionPerformed

    private void connectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionButtonActionPerformed
        connectToOMEROServer();
    }//GEN-LAST:event_connectionButtonActionPerformed

    private void disconnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectionButtonActionPerformed
        disconnectFromOMEROServer();              
    }//GEN-LAST:event_disconnectionButtonActionPerformed
    
    private void exportLineageTreeBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLineageTreeBarActionPerformed
        exportLineageTreeMenuItemActionPerformed(evt);
    }//GEN-LAST:event_exportLineageTreeBarActionPerformed

    private void printBar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBar1ActionPerformed
        printMenuItemActionPerformed(evt);
    }//GEN-LAST:event_printBar1ActionPerformed

    private void helpBar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBar1ActionPerformed
        mainMenuTabbedPane.setSelectedIndex(3);
    }//GEN-LAST:event_helpBar1ActionPerformed

    private void exportChartsBar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportChartsBar1ActionPerformed
            JOptionPane.showMessageDialog(this,
                "This option is still being implemented",
                "Message", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/under_construction48x48.png")));
    }//GEN-LAST:event_exportChartsBar1ActionPerformed

    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed
        connectToOMEROServer();
    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void disconnectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        disconnectFromOMEROServer();              
    }                                                  

    private void zoomInTBar1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        zoomInMenuItemActionPerformed(evt);
    }                                           

    private void fitToViewBarJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitToViewBarJMenuItemActionPerformed
            fitToViewjMenuItemActionPerformed(evt);
    }//GEN-LAST:event_fitToViewBarJMenuItemActionPerformed

    private void zoomOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutMenuItemActionPerformed
         if(newDataModel != null) {   
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();  
            List<DrawPhyloTreeGraph> list = activeWindow.getDrawedPhyloTreeList();
            final ScalingControl scaler = new CrossoverScalingControl();
            for( DrawPhyloTreeGraph ll: list) {
              ll.getPhyloTreePanel().zoomOut();;
            }
        } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_zoomOutMenuItemActionPerformed

    private void fitToViewjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitToViewjMenuItemActionPerformed
         if(newDataModel != null) {     
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();  
            List<DrawPhyloTreeGraph> list = activeWindow.getDrawedPhyloTreeList();
            for( DrawPhyloTreeGraph ll: list) {
            	ll.applyPerfectScale();
            }
        } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_fitToViewjMenuItemActionPerformed

    private void cancellAllActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }
    
    private void addFileToImportTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileToImportTableActionPerformed
        boolean exist = false;
        if( jTextField4.getText().equals("") & jTextField6.getText().equals("")) {
            JOptionPane.showMessageDialog(this,
                    "You have to select PhyloXML- and MetaML-File!",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        } else  {
            if( tableforImportFiles.getModel().getRowCount() != 0 ) {
                for(int i = 0; i < tableforImportFiles.getRowCount(); i++) {
                    if( jTextField4.getText().equals(tableforImportFiles.getValueAt(i, 0).toString()) 
                            & jTextField6.getText().equals(tableforImportFiles.getValueAt(i, 2).toString()) ) {
                        JOptionPane.showMessageDialog(this,
                        "The files to add already exist.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_error32x32.png")));
                        exist = true;
                    }
                }
            }
            if( !exist ) {
                ((DefaultTableModel)  tableforImportFiles.getModel()).
                               addRow(new Object[]{ phyloxmlFile.getName(), phyloxmlFile.length(), metaMLFile.getName(), metaMLFile.length()});
                
                fileListToBeImported.put(phyloxmlFile, metaMLFile);
                
                if( tableforImportFiles.getRowCount() > 0 ) {
                    deleteFileFromImportTable.setEnabled(true);
                    deleteAllFilesInImportTable.setEnabled(true);
                }
            }
        }     
    }//GEN-LAST:event_addFileToImportTableActionPerformed

    private void deleteFileFromImportTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFileFromImportTableActionPerformed
        if( tableforImportFiles.getModel().getRowCount() == 0 ) {
            JOptionPane.showMessageDialog(this,
                "The table is empty.",
                "Message",
                JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_information32x32.png")));

        } else {
                int selectedRows[] = tableforImportFiles.getSelectedRows();
                if ( selectedRows.length == 0 ) {
                    JOptionPane.showMessageDialog(this,
                    "Select one File. Please!",
                    "Message",
                    JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_information32x32.png")));
                } else {
                            String selectedCellIDs [] = new String[selectedRows.length];
                            for(int i = 0; i < selectedRows.length; i++) {
                                selectedCellIDs[i]= tableforImportFiles.getValueAt(selectedRows[i], 0).toString();
                            }
                            for(int i = 0; i < tableforImportFiles.getRowCount(); i++) {
                                for(int j = 0; j < selectedCellIDs.length; j++) {
                                	String phyloXmlToBeRemovedFilename = null;
                                	File phyloXmlToBeRemoved = null;
                                	
									/*
									 * TODO Dirty hack
									 * 
									 * Actually, we need to figure out a way to connect the
									 * table rows with file pairs. This would include a
									 * custom TableModel that renders the table directly
									 * from the connected pairs of files.
									 */                              	
                                	if( selectedCellIDs[j].equals(tableforImportFiles.getValueAt(i, 0).toString()) ) {
                                    	/* Get the filename from the row that is to be removed */
                                		phyloXmlToBeRemovedFilename = (String) ((DefaultTableModel)tableforImportFiles.getModel()).getValueAt(i, 0);
                                    	
                                    	/* Remove the row from the tableforImportFiles table */
                                    	((DefaultTableModel)tableforImportFiles.getModel()).removeRow(i);
                                    	
                                    	/* Determine the File object for the file that needs to be removed */
                                    	for (File phyloXmlFile : fileListToBeImported.keySet()) {
                                    		if (phyloXmlFile.getName().equals(phyloXmlToBeRemovedFilename)) {
                                    			phyloXmlToBeRemoved = phyloXmlFile;
                                    		}
                                    	}
                                    	
                                    	/* Remove file pair from fileListToBeImported */
                                    	fileListToBeImported.remove(phyloXmlToBeRemoved);
                                    }
                                    
                                        if ( tableforImportFiles.getModel().getRowCount() == 0 ) {
                                            deleteFileFromImportTable.setEnabled(false);
                                            deleteAllFilesInImportTable.setEnabled(false);
                                        }
                                }
                            }
                        }
            }
    }//GEN-LAST:event_deleteFileFromImportTableActionPerformed

    private void deleteAllFilesInImportTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllFilesInImportTableActionPerformed
        if( tableforImportFiles.getModel().getRowCount() == 0 ) {
            JOptionPane.showMessageDialog(this,
                "The table is empty.",
                "Message",
                JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_information32x32.png")));
        } else {
            int rowCount = tableforImportFiles.getRowCount();
            for(int i = rowCount-1; i >= 0; i--) {
                ((DefaultTableModel)tableforImportFiles.getModel()).removeRow(i);
            if ( tableforImportFiles.getModel().getRowCount() == 0 ) {
                    deleteFileFromImportTable.setEnabled(false);
                    deleteAllFilesInImportTable.setEnabled(false);
               }
            }
            fileListToBeImported.clear();
        }
    }//GEN-LAST:event_deleteAllFilesInImportTableActionPerformed

    private void importAllFilesInTableActionPerformed(java.awt.event.ActionEvent evt) {   	
    	/* Disable the Import button */
    	importAllFilesInTable.setEnabled(false);
    	
    	/* Add progress monitor*/
    	progressMonitor = new ProgressMonitor(this, "Importing files", "", 0, 100);
    	progressMonitor.setProgress(0);
    	progressMonitor.setMillisToDecideToPopup(0);
    	progressMonitor.setMillisToPopup(0);
    	
    	SwingWorker modelWorker = new SwingWorker<DataModel, Void>() {
    	    @Override
    	    public DataModel doInBackground() throws PhyloXMLException, MetaXMLException {
    	    	/* Close and remove 'old' trees */
            	for(PhyloTreeAnalyser analyzer : listphyloTreeAnalyser ) {
            		extendDesk.remove(analyzer);
                }
            	listphyloTreeAnalyser.clear();
    	    	
    	    	final DataModel dataModel = new DataModel();        	        
    	        Set<Map.Entry<File, File>> filePairs = fileListToBeImported.entrySet();
    	        
    	        int fileCounter = 1;       	               	     
    	        int fileNumber = filePairs.size();
    	        
    	        for (Map.Entry<File, File> me : filePairs) {
    				File phyloFile = me.getKey();
    				File metaFile = me.getValue();
    				
    				if ((phyloFile != null) && (metaFile != null)) {
    					Forest f = new Forest(phyloFile, metaFile);
    					
    					/* Add to DataModel */
    					dataModel.addForest(f);
    					
    					/* Create visualization */
    					PhyloTreeAnalyser phyloTreeAnalyserJinterFrame = new PhyloTreeAnalyser(f, cellsComaparisonTable);
    					listphyloTreeAnalyser.add(phyloTreeAnalyserJinterFrame);
    					
    					int progress = (int)((fileCounter/(double)fileNumber)*100);
    					setProgress(progress);
    					
    					fileCounter++;
    				}
    			}
    	        
    	        return dataModel;
    	    }

    	    @Override
    	    public void done() {
    	        try {
    	        	try {
    	        		newDataModel = get();
    	        	} catch (ExecutionException ex) {
						/*
						 * The SwingWorker framework wraps the exceptions thrown
						 * by doInBackground into ExecutionExceptions that are
						 * thrown when calling get()
						 */
    	        		if (ex.getCause() instanceof PhyloXMLException) {
	    	        		JOptionPane.showMessageDialog(MainView.this,
	    	        				ex.getCause().getMessage(),
	    	                        "Problem loading PhyloXML",
	    	                        JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_information32x32.png")));
	    	        		return;
    	        		} else if (ex.getCause() instanceof MetaXMLException) {
    	        			JOptionPane.showMessageDialog(MainView.this,
    	        					ex.getCause().getMessage(),
        	                        "Problem loading MetaXML",
        	                        JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_information32x32.png")));
        	        		return;
    	        		}
    	        	}
    	        	
    	        	/* Do not show the trees until all have been imported */
    	            for(PhyloTreeAnalyser analyzer : listphyloTreeAnalyser ) {
    	            	extendDesk.add(analyzer);
    	            }   
    	            extendDesk.validate();
    	            
    	            visualAnalysisMenu.setEnabled(true);
    	            comparisonGrowthRateChartMenuItem.setEnabled(true);
    	            comparisonGrowthCurveChartMenuItem.setEnabled(true);
    	            mainMenuTabbedPane.setSelectedIndex(2);
    	        } catch (InterruptedException ignore) {}
    	    }
    	};
    	modelWorker.addPropertyChangeListener(this);

    	cellsComaparisonTable = new CellsComparisonTable();
    	if( tableforImportFiles.getModel().getRowCount() == 0 ) {
            JOptionPane.showMessageDialog(this,
                "Add the files to be imported. Please!",
                "Message",
                JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_information32x32.png")));
        } else {        	
        	modelWorker.execute();
        }
        
        //TODO create hier the comparison table 
        JPanel compTabPanel = initCellsComparisonJTable(cellsComaparisonTable);
        JInternalFrame jInternalFrameForCellsCompTable = new JInternalFrame("Comparison table");
        
        jInternalFrameForCellsCompTable.add(compTabPanel);
        jInternalFrameForCellsCompTable.setVisible(true);
        jInternalFrameForCellsCompTable.setMaximizable(true);
        extendDesk.add(jInternalFrameForCellsCompTable);
        visualAnalysisMenu.setEnabled(true);
        comparisonGrowthRateChartMenuItem.setEnabled(true);
        comparisonGrowthCurveChartMenuItem.setEnabled(true);
        mainMenuTabbedPane.setSelectedIndex(2);
        
        /* Enable Import button again */
        importAllFilesInTable.setEnabled(true);
    } 
    
     private JPanel initCellsComparisonJTable(CellsComparisonTable cellCompTable) {
    
    /** JScrollPane for visualization of the cell Information table. */
        JScrollPane cellsComparisonTabScrollPane = new JScrollPane();
        JPanel cellsComparisonPanel2 = new javax.swing.JPanel();
//        cellsComparisonPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Compared cells list"));
        cellsComparisonPanel2.setPreferredSize(new java.awt.Dimension(900, 110));

       
        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(cellsComparisonPanel2);
        cellsComparisonPanel2.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cellsComparisonTabScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                )
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(cellsComparisonTabScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                )
        );
        
        cellsComparisonTabScrollPane.setViewportView(cellCompTable);
        
        return cellsComparisonPanel2;
    }
    
    private void tileVerticalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tileVerticalMenuItemActionPerformed
       tileVerticalMenuItemActionPerformed(evt);
    }//GEN-LAST:event_tileVerticalMenuItemActionPerformed

    private void cascadeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cascadeMenuItemActionPerformed
       if( newDataModel != null ) {
            extendDesk.cascade();
        } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_cascadeMenuItemActionPerformed

    private void visualAnalysisMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualAnalysisMenuActionPerformed
        VisualAnalysisSettingsJDialog vad = new VisualAnalysisSettingsJDialog(this, true);
        vad.setVisible(true);
        String selectedVisualAnalysisMode = vad.getSelectedSource();
        Map<String, Double> _thresholds = vad.getThresholds();
        if( selectedVisualAnalysisMode == null )
            throw new IllegalArgumentException(" The selected visual analysis mode is null!");
         else {
            for ( PhyloTreeAnalyser phylTreeAnaly : listphyloTreeAnalyser) {
                for ( DrawPhyloTreeGraph drawPhyloTreeObj : phylTreeAnaly.getDrawedPhyloTreeList() )
                        drawPhyloTreeObj.setVisualAnalysisMode(selectedVisualAnalysisMode, _thresholds);
            }
        }
    }//GEN-LAST:event_visualAnalysisMenuActionPerformed

    private void comparisonGrowthCurveChartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comparisonGrowthCurveChartMenuItemActionPerformed
        ComparisonGrowthCurveChart2D compGrowthRateChart = new ComparisonGrowthCurveChart2D(newDataModel);
        JFrame plotFrame = new JFrame("Growth curve chart");
        plotFrame.getContentPane().add(compGrowthRateChart);
        plotFrame.setSize(600, 700);
        plotFrame.setVisible(true);
    }//GEN-LAST:event_comparisonGrowthCurveChartMenuItemActionPerformed

    private void comparisonGrowthRateChartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comparisonGrowthRateChartMenuItemActionPerformed
        ComparisonGrowthRateChart2D compGrowthRateChart = new ComparisonGrowthRateChart2D(newDataModel);
        JFrame plotFrame = new JFrame("Growth rate chart");
        plotFrame.getContentPane().add(compGrowthRateChart);
        plotFrame.setSize(600, 700);
        plotFrame.setVisible(true);
    }//GEN-LAST:event_comparisonGrowthRateChartMenuItemActionPerformed

    private void tileHorizontalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tileHorizontalMenuItemActionPerformed
       if( newDataModel != null ) {
            extendDesk.tileHorizontal();
        } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_tileHorizontalMenuItemActionPerformed

    private void dataDrivenAnalysisMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataDrivenAnalysisMenuActionPerformed
       VisualComparisonSettings vcd = new VisualComparisonSettings(this, true);
        vcd.setVisible(true);
        String selectedDataDriveAnalysisMode = vcd.getSelectedSource();
        logger.debug("selectedDataDriveAnalysisMode: " + selectedDataDriveAnalysisMode);
//        Map<String, Double> thresholds = vcd.getThresholds();
        if( selectedDataDriveAnalysisMode == null )
            throw new IllegalArgumentException(" The selected data drive analysis mode is null!");
        else {
            listphyloTreeAnalyser.get(0).getDrawedPhyloTreeList().get(0).setDataDriveAnalysisMode(selectedDataDriveAnalysisMode);
            for ( PhyloTreeAnalyser phylTreeAnaly : listphyloTreeAnalyser) {
                for ( DrawPhyloTreeGraph drawPhyloTreeObj : phylTreeAnaly.getDrawedPhyloTreeList() ) {
                    //                        drawPhyloTreeObj.setDataDriveAnalysisMode(selectedDataDriveAnalysisMode);
                        drawPhyloTreeObj.setDataDriveAnalysisMode(selectedDataDriveAnalysisMode);
                }
            }
            
        }
    }//GEN-LAST:event_dataDrivenAnalysisMenuActionPerformed

    private void exportYFPFluorescenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportYFPFluorescenceActionPerformed
        if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();//getAllFramesInLayer(0);
            TraceChart2D yfpFluorscenceChart = activeWindow.getYFPChart();
            GraphicsExporter.exportChart2D(yfpFluorscenceChart, lineChart);
            
        } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }       
    }//GEN-LAST:event_exportYFPFluorescenceActionPerformed

    private void exportCrimsonFluorescenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCrimsonFluorescenceActionPerformed
        if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            TraceChart2D crimsonFluorscenceChart = activeWindow.getCrimsonChart();
            GraphicsExporter.exportChart2D(crimsonFluorscenceChart, lineChart);
            
        } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        } 
    }//GEN-LAST:event_exportCrimsonFluorescenceActionPerformed

    private void exportPopulationCellLengthDistributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPopulationCellLengthDistributionActionPerformed
        if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            CellLengthDistributionChart2D lengthDistribution = activeWindow.getLengthDistributionChart();
            GraphicsExporter.exportChart2D(lengthDistribution, histoChart);
                    
        } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_exportPopulationCellLengthDistributionActionPerformed

    private void exportCellLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCellLengthActionPerformed
       if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            TraceChart2D lengthChart = activeWindow.getLengthChart();
            GraphicsExporter.exportChart2D(lengthChart, lineChart);

       } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_exportCellLengthActionPerformed

    private void exportPopulationAreaDistributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPopulationAreaDistributionActionPerformed
        if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            CellAreaDistributionChart2D areaDistribution = activeWindow.getAreaDistributionChart();
            GraphicsExporter.exportChart2D(areaDistribution, histoChart);
                    
        } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_exportPopulationAreaDistributionActionPerformed

    private void exportSingleCellAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSingleCellAreaActionPerformed
      if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            TraceChart2D areaChart = activeWindow.getAreaChart();
            GraphicsExporter.exportChart2D(areaChart, lineChart);
            
        } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_exportSingleCellAreaActionPerformed

    private void exportSingleCellDivisionTimesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSingleCellDivisionTimesActionPerformed
       if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            TraceChart2D cellDivissionTimesChart = activeWindow.getCellDivisionTimesChart();
            GraphicsExporter.exportChart2D(cellDivissionTimesChart, lineChart);
            
        } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_exportSingleCellDivisionTimesActionPerformed

    private void exportPopulationDivisionTimesDistributionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPopulationDivisionTimesDistributionActionPerformed
       if(newDataModel != null) { 
            PhyloTreeAnalyser activeWindow = (PhyloTreeAnalyser) extendDesk.getSelectedFrame();
            PopulationDivisionTimesDistributionChart2D popDivsionTimesDistribution = activeWindow.
                    getDivisionTimeOfPopulationChart2D();
            GraphicsExporter.exportChart2D(popDivsionTimesDistribution, histoChart);
                    
        } else {
             JOptionPane.showMessageDialog(this,
                        "You have to import at first PhyloXML- and MetaML-files!",
                        "Warning",
                        JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_exportPopulationDivisionTimesDistributionActionPerformed

    private void tileVerticalBarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tileVerticalBarItemActionPerformed
       if( newDataModel != null ) {
            extendDesk.tileVertical();
        } else {
             JOptionPane.showMessageDialog(this,
                "You have to import at first PhyloXML- and MetaML-files!",
                "Warning",
                JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/icons/alert_3_32x32.png")));
        }
    }//GEN-LAST:event_tileVerticalBarItemActionPerformed

    private void tileHorizentalBarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tileHorizentalBarItemActionPerformed
        tileHorizontalMenuItemActionPerformed(evt);
    }//GEN-LAST:event_tileHorizentalBarItemActionPerformed

    private void cascadeBarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cascadeBarItemActionPerformed
        cascadeMenuItemActionPerformed(evt);
    }//GEN-LAST:event_cascadeBarItemActionPerformed
          
    /**
     * Centers this frame on screen when opened
     */
    public void centerFrame() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        int x = (screenSize.width - frameSize.width)/2;
        int y = (screenSize.height - frameSize.height)/2;
        this.setLocation(x, y);
    }
        
    /**
    * 
    * 
    * @param phyloFile
    * @param metaFile 
    */ 
    public void openFiles(File phyloFile, File metaFile) {
      Map<File, File> fileListToBeImported2 = new HashMap<File, File>();
      if(phyloFile != null && metaFile != null) {
            fileListToBeImported2.put(phyloFile, metaFile);
			try {
				DataModel datamodel = new DataModel(fileListToBeImported2.entrySet());
				
				for( Forest f: datamodel.getForestsList() ) {
                    if ( f == null ) 
                        throw new IllegalArgumentException("DataModel is Null");
                    else {
                        mainMenuTabbedPane.setSelectedIndex(2);
                    }
                }
			} catch (PhyloXMLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (MetaXMLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
      } else
        throw new IllegalArgumentException("PhyloXML or MetaXML argument is Null.");
    }    
    
    /**
     * This method initializes desktopPane	
     * 	
     * @return javax.swing.JDesktopPane	
     */
    private ExtendedDesktopPane getDesktopPane() {
            if ( extendDesk == null ) {
                    extendDesk = new ExtendedDesktopPane() {
                    @Override
                    protected void paintComponent(Graphics grphcs) {
                        Image img = new javax.swing.ImageIcon(this.getClass().getResource("/icons/dt_blau_1920x1200br.jpg")).getImage();
                        if( img == null )
                        super.paintComponent(grphcs);
                        else {
                            Graphics2D g2d = (Graphics2D)grphcs;
                            g2d.drawImage(img, 0, 0, this);
                        }
                    }
                    

                };   
                 init(extendDesk);
            }
            return extendDesk;
    }

    private void init(ExtendedDesktopPane exDesk) {
        exDesk.paintComponents(null);
        exDesk.setBackground(new java.awt.Color(255, 255, 255));
        exDesk.setMaximumSize(new java.awt.Dimension(1000, 1024));
        exDesk.setPreferredSize(new java.awt.Dimension(950, 650));
        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exDesk, javax.swing.GroupLayout.DEFAULT_SIZE, 1150, Short.MAX_VALUE)
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(exDesk, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE))
        );
    }
    

    private void connectToOMEROServer() {
        try {
            login = new Login(this, true);
            login.setVisible(true);
            omeroServer = new OMEROServer(login);
            File downloadFolder = omeroServer.connectOMEROServer();
            
            jFileChooserInNavigator.setCurrentDirectory(downloadFolder);
            
            mainMenuTabbedPane.setSelectedIndex(1);
            jFileChooserInNavigator.updateUI();
        } catch (ServerError ex) {
        	logger.error(null, ex);
        	JOptionPane.showMessageDialog(login, "Connection failed. Please try again later.");
        } catch (CannotCreateSessionException ex) {
        	logger.error(null, ex);
        	JOptionPane.showMessageDialog(login, "Connection failed. Please try again later.");
        } catch (PermissionDeniedException ex) {
        	logger.error(null, ex);
        	JOptionPane.showMessageDialog(login, "Wrong username or password. Please try again.");
        } catch (FileNotFoundException ex) {
        	logger.error(null, ex);
        }
    }
    
    private void disconnectFromOMEROServer() {
         int n = JOptionPane.showConfirmDialog(
                    this, "Do you really want to disconnect from Server?", "Disconnect",
                    JOptionPane.YES_NO_OPTION, 0, new javax.swing.ImageIcon(getClass().getResource("/icons/symbol_help24x24.png")));
            if( n == JOptionPane.YES_OPTION ) {
                omeroServer.disconnectOMEROServer();
                login.dispose();
            } else if(n == JOptionPane.NO_OPTION) 
                login.dispose();
    }
     
    public void propertyChange(PropertyChangeEvent event) {
        // if the operation is finished or has been canceled by
        // the user, take appropriate action
        if (progressMonitor.isCanceled()) {
//            worker.cancel(true);
        } else if (event.getPropertyName().equals("progress")) {            
            // get the % complete from the progress event
            // and set it on the progress monitor
            int progress = ((Integer)event.getNewValue()).intValue();
            progressMonitor.setProgress(progress);            
        }        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu ExportLengthChartsjMenu;
    private javax.swing.JMenuItem ExportPopulationCellLengthDistribution;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JButton addFileToImportTable;
    private javax.swing.JMenu analysisMenu;
    private javax.swing.JMenu areaChartsjMenu;
    private javax.swing.JButton cancelAll;
    private javax.swing.JButton cascadeBarItem;
    private javax.swing.JMenuItem cascadeMenuItem;
    private javax.swing.JMenuItem cellLengthjMenuItem2;
    private javax.swing.JMenuItem comparisonGrowthCurveChartMenuItem;
    private javax.swing.JMenuItem comparisonGrowthRateChartMenuItem;
    private javax.swing.JMenuItem connectMenuItem;
    private javax.swing.JButton connectionButton;
    private javax.swing.JButton deleteAllFilesInImportTable;
    private javax.swing.JButton deleteFileFromImportTable;
    private javax.swing.JMenuItem disconnectMenuItem;
    private javax.swing.JButton disconnectionButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JPanel exitPanel;
    private javax.swing.JButton exportChartsBar1;
    private javax.swing.JMenuItem exportCrimsonFluorescence;
    private javax.swing.JMenu exportDiagrammsMenu;
    private javax.swing.JButton exportLineageTreeBar;
    private javax.swing.JMenuItem exportLineageTreeMenuItem;
    private javax.swing.JMenuItem exportPopulationAreaDistribution;
    private javax.swing.JMenuItem exportPopulationDivisionTimes;
    private javax.swing.JMenuItem exportPopulationDivisionTimesDistribution;
    private javax.swing.JMenuItem exportSingleCellArea;
    private javax.swing.JMenuItem exportSingleCellDivisionTimes;
    private javax.swing.JMenuItem exportYFPFluorescence;
    private javax.swing.JPanel fileChooserPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel fileMenuHelp;
    private javax.swing.JButton fitToViewBarJMenuItem;
    private javax.swing.JMenuItem fitToViewjMenuItem;
    private javax.swing.JButton helpBar1;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel helpMenuHelp;
    private javax.swing.JPanel helpPanel;
    private javax.swing.JButton importAllFilesInTable;
    private javax.swing.JFileChooser jFileChooserInNavigator;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_IBG1Bild;
    private javax.swing.JLabel jLabel_IBG1Logo;
    private javax.swing.JLabel jLabel_IBG1Text1;
    private javax.swing.JLabel jLabel_IBG1Text2;
    private javax.swing.JLabel jLabel_JuelichLogo;
    private javax.swing.JLabel jLabel_LogoLeiste;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemHelp;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel jl_seletedFile3;
    private javax.swing.JLabel jl_seletedFile4;
    private javax.swing.JTabbedPane mainMenuTabbedPane;
    private javax.swing.JPanel navigatorPanel;
    private javax.swing.JButton openFileBtn;
    private javax.swing.JButton printBar1;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JMenuItem selectAllLeavesMenuItem;
    private javax.swing.JMenuItem selectAllNodesMenuItem;
    private javax.swing.JMenu selectMenu;
    private javax.swing.JPanel selectMenuHelp;
    private javax.swing.JMenuItem selectRootMenuItem;
    private javax.swing.JTable tableforImportFiles;
    private javax.swing.JButton tileHorizentalBarItem;
    private javax.swing.JMenu tileHorizontalMeniItem;
    private javax.swing.JMenuItem tileHorizontalMenuItem;
    private javax.swing.JButton tileVerticalBarItem;
    private javax.swing.JMenuItem tileVerticalMenuItem;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JPanel viewPanel;
    private javax.swing.JPanel viewtMenuHelp;
    private javax.swing.JPanel viewtMenuHelp1;
    private javax.swing.JPanel viewtMenuHelp2;
    private javax.swing.JMenuItem visualAnalysisMenu;
    private javax.swing.JPanel welcomePanel;
    private javax.swing.JMenuItem zoomInMenuItem;
    private javax.swing.JButton zoomInTBar1;
    private javax.swing.JMenuItem zoomOutMenuItem;
    private javax.swing.JButton zoomOutTBar1;
    // End of variables declaration//GEN-END:variables

	@Override
	public void internalFrameActivated(InternalFrameEvent e) {	}

	@Override
	public void internalFrameClosed(InternalFrameEvent e) {
		JInternalFrame internalFrame = e.getInternalFrame();
	
		if (internalFrame instanceof PhyloTreeAnalyser) {
			PhyloTreeAnalyser analyzer = (PhyloTreeAnalyser) internalFrame;			
			Forest forest = analyzer.getForest();
			
			/* Remove from list of analyzers when closed */
			listphyloTreeAnalyser.remove(analyzer);
			
			/* Remove forest from DataModel to save memory */
			newDataModel.removeForest(forest);
		}
		
	}

	@Override
	public void internalFrameClosing(InternalFrameEvent e) { }

	@Override
	public void internalFrameDeactivated(InternalFrameEvent e) { }

	@Override
	public void internalFrameDeiconified(InternalFrameEvent e) { }

	@Override
	public void internalFrameIconified(InternalFrameEvent e) { }

	@Override
	public void internalFrameOpened(InternalFrameEvent e) { }
}
