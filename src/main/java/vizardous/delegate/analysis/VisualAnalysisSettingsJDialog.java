/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vizardous.delegate.analysis;

import java.awt.event.ActionEvent;

import javax.swing.ButtonGroup;

import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.AbstractButton;

/**
 * This class is responsible for activating analysis modes and querying for user
 * input for the respective analysis modes.
 * 
 * TODO Store and show currently active analysis mode
 * TODO Store parameters for active analysis mode
 * TODO Add individual panels for the analysis modes
 * TODO Switching from None to Cells mode acts weird on some buttons
 *
 * @author Charaf E. Azzouzi <c.azzouzi@fz-juelich.de>
 * @author Stefan Helfrich <s.helfrich@fz-juelich.de>
 */
public class VisualAnalysisSettingsJDialog extends javax.swing.JDialog implements ActionListener {

	private static final long serialVersionUID = 8873282570979101425L;
	private ButtonGroup groupButtonMode         = new ButtonGroup();
    private ButtonGroup groupButtonCellsCharac  = new ButtonGroup();
    private ButtonGroup groupButtonFluorescencesTyp  = new ButtonGroup();
    String selectedSource ;
    Map<String, Double> thresholds = new HashMap<String, Double>();
    
    /**
     * Creates new form VisualAnalysisSettingsJDialog
     */
    public VisualAnalysisSettingsJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        fluorescencesRB = new javax.swing.JRadioButton();
        lengthRB = new javax.swing.JRadioButton();
        areaRB = new javax.swing.JRadioButton();
        fluorescence1RB = new javax.swing.JRadioButton();
        fluorescence2RB = new javax.swing.JRadioButton();
        yfpThresholdRB = new javax.swing.JRadioButton();
        crimsonThresholdRB = new javax.swing.JRadioButton();
        yfpThresholdValueTextField = new javax.swing.JTextField();
        crimsonThresholdValueTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cellsAnalysisMode = new javax.swing.JRadioButton();
        noneAnalysisMode = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Visual Analysis settings");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Cells analysis"));
        
        cellsAnalysisMode.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					fluorescencesRB.setEnabled(true);
	                lengthRB.setEnabled(true);
	                areaRB.setEnabled(true);
	                yfpThresholdRB.setEnabled(true);
	                crimsonThresholdRB.setEnabled(true);
	                fluorescence1RB.setEnabled(true);
	                fluorescence2RB.setEnabled(true);
			    }
			    else if (e.getStateChange() == ItemEvent.DESELECTED) {
			    	fluorescencesRB.setEnabled(false);
	                lengthRB.setEnabled(false);
	                areaRB.setEnabled(false);
	                yfpThresholdRB.setEnabled(false);
	                crimsonThresholdRB.setEnabled(false);
	                fluorescence1RB.setEnabled(false);
	                fluorescence2RB.setEnabled(false);
	                yfpThresholdValueTextField.setEnabled(false);
	                crimsonThresholdValueTextField.setEnabled(false);
			    }
			}
        });
        
        fluorescencesRB.setSelected(true);
        fluorescencesRB.setText("Fluorescences");
        fluorescencesRB.setEnabled(false);

        fluorescencesRB.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.DESELECTED) {
					fluorescence1RB.setSelected(false);
		            fluorescence2RB.setSelected(false);
		            fluorescence1RB.setEnabled(false);
		            fluorescence2RB.setEnabled(false);
				} else {
					fluorescence1RB.setEnabled(true);
		            fluorescence2RB.setEnabled(true);
				}
			}        	
        });
        
        lengthRB.setText("Length");
        lengthRB.setEnabled(false);
        
        areaRB.setText("Area");
        areaRB.setEnabled(false);

        fluorescence1RB.setText("YFP fluorescence");
        fluorescence1RB.setEnabled(false);

        fluorescence2RB.setText("CRIMSON fluorescence");
        fluorescence2RB.setEnabled(false);
        
        yfpThresholdRB.setText("YFP threshold");
        yfpThresholdRB.setEnabled(false);
        yfpThresholdRB.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.DESELECTED) {
					yfpThresholdValueTextField.setEnabled(false);
				} else {
					yfpThresholdValueTextField.setEnabled(true);
				}
			}        	
        });
        
        crimsonThresholdRB.setText("Crimson threshold");
        crimsonThresholdRB.setEnabled(false);
        crimsonThresholdRB.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.DESELECTED) {
					crimsonThresholdValueTextField.setEnabled(false);
				} else {
					crimsonThresholdValueTextField.setEnabled(true);
				}
			}        	
        });

        yfpThresholdValueTextField.setText("140.0");
        yfpThresholdValueTextField.setEnabled(false);
        yfpThresholdValueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yfpThresholdValueTextFieldActionPerformed(evt);
            }
        });

        crimsonThresholdValueTextField.setText("180.0");
        crimsonThresholdValueTextField.setEnabled(false);
        crimsonThresholdValueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crimsonThresholdValueTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(crimsonThresholdRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(crimsonThresholdValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(areaRB)
                            .addComponent(lengthRB)
                            .addComponent(fluorescencesRB)
                            .addComponent(yfpThresholdRB))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fluorescence2RB)
                                    .addComponent(fluorescence1RB)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(yfpThresholdValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(127, 127, 127)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fluorescence1RB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fluorescence2RB)
                        .addGap(26, 26, 26))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fluorescencesRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lengthRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(areaRB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yfpThresholdRB)
                    .addComponent(yfpThresholdValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crimsonThresholdRB)
                    .addComponent(crimsonThresholdValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel1.setText("Select cells or clades analysis mode.");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Analysis Mode"));

        cellsAnalysisMode.setText("Cells");

        noneAnalysisMode.setSelected(true);
        noneAnalysisMode.setText("None");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noneAnalysisMode)
                .addGap(18, 18, 18)
                .addComponent(cellsAnalysisMode)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cellsAnalysisMode)
                    .addComponent(noneAnalysisMode))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("OK");
        jButton1.setAlignmentX(0.5F);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void yfpThresholdValueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yfpThresholdValueTextFieldActionPerformed
        thresholds.put("yfp", Double.valueOf(yfpThresholdValueTextField.getText()));
    }//GEN-LAST:event_yfpThresholdValueTextFieldActionPerformed

    private void crimsonThresholdValueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crimsonThresholdValueTextFieldActionPerformed
        thresholds.put("crimson", Double.valueOf(crimsonThresholdValueTextField.getText()));
    }//GEN-LAST:event_crimsonThresholdValueTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualAnalysisSettingsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualAnalysisSettingsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualAnalysisSettingsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualAnalysisSettingsJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VisualAnalysisSettingsJDialog dialog = new VisualAnalysisSettingsJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton areaRB;
    private javax.swing.JRadioButton cellsAnalysisMode;
    private javax.swing.JRadioButton crimsonThresholdRB;
    private javax.swing.JTextField crimsonThresholdValueTextField;
    private javax.swing.JRadioButton fluorescence1RB;
    private javax.swing.JRadioButton fluorescence2RB;
    private javax.swing.JRadioButton fluorescencesRB;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton lengthRB;
    private javax.swing.JRadioButton noneAnalysisMode;
    private javax.swing.JRadioButton yfpThresholdRB;
    private javax.swing.JTextField yfpThresholdValueTextField;
    // End of variables declaration//GEN-END:variables

    private void init() {
        cellsAnalysisMode.addActionListener(this);
        noneAnalysisMode.addActionListener(this);
        fluorescencesRB.addActionListener(this);
        lengthRB.addActionListener(this);
        areaRB.addActionListener(this);
        fluorescence1RB.addActionListener(this);
        fluorescence2RB.addActionListener(this);
        yfpThresholdRB.addActionListener(this);
        crimsonThresholdRB.addActionListener(this);
        
        groupButtonMode.add(noneAnalysisMode);
        groupButtonMode.add(cellsAnalysisMode);
        
        groupButtonCellsCharac.add(fluorescencesRB);
        groupButtonCellsCharac.add(lengthRB);
        groupButtonCellsCharac.add(areaRB);
        groupButtonCellsCharac.add(yfpThresholdRB);
        groupButtonCellsCharac.add(crimsonThresholdRB);
        
        groupButtonFluorescencesTyp.add(fluorescence1RB);
        groupButtonFluorescencesTyp.add(fluorescence2RB);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        AbstractButton source = (AbstractButton)ae.getSource();
        if (source == cellsAnalysisMode) {
            selectedSource = cellsAnalysisMode.getText();            
        } else if (source == lengthRB) {
            selectedSource = lengthRB.getText();
        } else if (source == areaRB) {
            selectedSource = areaRB.getText();           
        } else if (source == fluorescencesRB) {
            selectedSource = fluorescencesRB.getText();        
        } else if (source == fluorescence1RB) {
            selectedSource = fluorescence1RB.getText();
        } else if (source == fluorescence2RB) {
            selectedSource = fluorescence2RB.getText();           
        } else if (source == yfpThresholdRB) {
        	selectedSource = yfpThresholdRB.getText();
        	if (thresholds.get("yfp") == null) {
        		thresholds.put("yfp", Double.valueOf(yfpThresholdValueTextField.getText()));
        	}               
        } else if (source == crimsonThresholdRB) {
        	selectedSource = crimsonThresholdRB.getText();
        	if (thresholds.get("crimson") == null) {
        		thresholds.put("crimson", Double.valueOf(crimsonThresholdValueTextField.getText()));
        	}
        } else if (source == noneAnalysisMode) {
        	selectedSource = noneAnalysisMode.getText();
        }
    }

    /**
     * Gets the selected JRadioButton 
     * 
     * @return 
     */
    public String getSelectedSource() {
        return selectedSource;
    }

	public Map<String, Double> getThresholds() {
		return thresholds;
	}
}
